import telebot
from telebot import types
import json
import os
import csv
from datetime import datetime, timedelta
import requests
import time
import sqlite3
import logging
import threading
import random
import socket

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# ================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ò–ù–¢–ï–†–ù–ï–¢–£ ==================
def test_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"""
    try:
        socket.gethostbyname('api.telegram.org')
        print("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        response = requests.get('https://api.telegram.org', timeout=10)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except socket.gaierror as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DNS: {e}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É...")
if not test_internet_connection():
    print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DNS")
    print("   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É Telegram")
    exit(1)

# ================== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ==================
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    print("‚úï –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(1)

try:
    bot = telebot.TeleBot(BOT_TOKEN)
    bot_info = bot.get_me()
    print(f"‚òê –ë–æ—Ç {bot_info.first_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚úï –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
    exit(1)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
USERS_FILE = 'users.json'
GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1qsffjxK5k8RZpAViVctPW8_hGmxVxGyrFbcGiBxeh18/edit#gid=0"
SUGGESTIONS_CHANNEL = '-1003025188845'
PASSWORD = "admin123"
CREDIT_CHANNEL = '-1003025188845'

ADMIN_IDS = [755395834, 6702500580]

# –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
DAILY_BONUS_VARIANTS = [
    {"min": 5, "max": 15, "probability": 0.6},
    {"min": 16, "max": 30, "probability": 0.3},
    {"min": 31, "max": 50, "probability": 0.1}
]

BONUS_STREAK_REWARDS = {
    3: 25,
    7: 50,
    14: 100,
    30: 200
}

# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –æ–ø—ã—Ç–∞
LEVELS_CONFIG = {
    1: {"xp_required": 0, "reward": 0, "name": "–ù–æ–≤–∏—á–æ–∫"},
    2: {"xp_required": 100, "reward": 50, "name": "–£—á–µ–Ω–∏–∫"},
    3: {"xp_required": 300, "reward": 100, "name": "–ê–∫—Ç–∏–≤–∏—Å—Ç"},
    4: {"xp_required": 600, "reward": 150, "name": "–û–ø—ã—Ç–Ω—ã–π"},
    5: {"xp_required": 1000, "reward": 200, "name": "–≠–∫—Å–ø–µ—Ä—Ç"},
    6: {"xp_required": 1500, "reward": 300, "name": "–ú–∞—Å—Ç–µ—Ä"},
    7: {"xp_required": 2100, "reward": 400, "name": "–ì—É—Ä—É"},
    8: {"xp_required": 2800, "reward": 500, "name": "–õ–µ–≥–µ–Ω–¥–∞"}
}

XP_REWARDS = {
    "daily_bonus": 10,
    "purchase": 5,
    "suggestion": 15,
    "quiz_participation": 20,
    "loan_taken": 25,
    "loan_repaid": 30,
    "referral": 50,
    "lottery_purchase": 3
}

user_states = {}
google_sheets_cache = {}
CACHE_DURATION = 300

# ================== –î–ê–ù–ù–´–ï –ú–ê–ì–ê–ó–ò–ù–ê ==================
PRODUCTS = {
    "–ü–æ–¥–∞—Ä–æ–∫ –º–∞–ª—ã–π": {
        "name": "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≤ Telegram –º–∞–ª—ã–π",
        "description": "–õ—é–±–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram –Ω–∞ –≤–∞—à –≤–∫—É—Å\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 ‚≠ê",
        "price": 250,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–ü–æ–¥–∞—Ä–æ–∫ –±–æ–ª—å—à–æ–π": {
        "name": "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –≤ Telegram –±–æ–ª—å—à–æ–π",
        "description": "–õ—é–±–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram –Ω–∞ –≤–∞—à –≤–∫—É—Å\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 250 ‚≠ê",
        "price": 320,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–£—Ä–æ–∫": {
        "name": "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
        "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ —Å –ù–∏–∫–∏—Ç–æ–π –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –¥–∞—é—Ç—Å—è\n\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1,5-2 —á–∞—Å–∞\n‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω\n‚Ä¢ –ó–∞–ø–∏—Å—å: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "price": 200,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–ü–æ–¥–ø–∏—Å–∫–∞": {
        "name": "üíé Telegram-–ü—Ä–µ–º–∏—É–º",
        "description": "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞\n\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3 –º–µ—Å—è—Ü–∞",
        "price": 600,
        "category": "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ Telegram"
    },
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 500 —Ä—É–±": {
        "name": "üé´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ1",
        "description": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ç-–ø–ª–µ–π—Å–∞—Ö\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500 —Ä—É–±–ª–µ–π\n‚Ä¢ –û–∑–æ–Ω/ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ/ –õ'–≠—Ç—É–∞–ª—å\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ",
        "price": 360,
        "category": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    },
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 1000 —Ä—É–±": {
        "name": "üé´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Ññ2",
        "description": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ç-–ø–ª–µ–π—Å–∞—Ö\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 1000 —Ä—É–±–ª–µ–π\n‚Ä¢ –û–∑–æ–Ω/ –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ/ –õ'–≠—Ç—É–∞–ª—å\n‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ",
        "price": 550,
        "category": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    },
    "–°–ª–∞–¥–æ—Å—Ç–∏": {
        "name": "üç¨ –°–ª–∞–¥–æ—Å—Ç–∏",
        "description": "–í–∫—É—Å–Ω—è—à–∫–∏ –Ω–∞ –≤–∞—à –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–º–æ–∫–∞—Ç)\n\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500 —Ä—É–±–ª–µ–π",
        "price": 340,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–°—Ö–æ–¥–∫–∞": {
        "name": "ü•≥ –°—Ö–æ–¥–∫–∞",
        "description": "–ï—Å–ª–∏ –≤—ã –∏–¥–µ—Ç–µ –Ω–∞ —Å—Ö–æ–¥–∫–∞ - –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π –≤–º–µ—Å—Ç–æ –æ–ø–ª–∞—Ç—ã –∫–≤–µ—Å—Ç–∞\n\n‚Ä¢ –ö–≤–µ—Å—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞ –≤–∞—Å\n‚Ä¢ –í –¥–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω –ø–µ—Ä–µ–∫—É—Å –¥–æ 500 —Ä—É–±–ª–µ–π –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞ (–ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏)",
        "price": 790,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    },
    "–ú–µ—Ä—á": {
        "name": "üî• –ú–µ—Ä—á –Ω–æ–æfuck'–∞",
        "description": "–≠–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–æ–æfuck'–∞\n\n‚Ä¢ –í–µ—Ä—Å–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º\n‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–∞–π",
        "price": 300,
        "category": "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    }
}

# ================= –ë–ê–ó–ê –î–ê–ù–ù–´–• –ë–ê–õ–ê–ù–°–û–í ==================
BALANCE_DB = 'user_balances.db'


def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(
        BALANCE_DB,
        timeout=30.0,
        check_same_thread=False
    )
    conn.execute("PRAGMA foreign_keys = ON")
    return conn


def init_balance_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                credit_balance INTEGER DEFAULT 0,
                google_balance INTEGER DEFAULT 0,
                google_sync_date TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                amount INTEGER,
                type TEXT,
                description TEXT,
                product_id TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS loans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                amount INTEGER,
                interest_rate REAL DEFAULT 14.0,
                term_weeks INTEGER DEFAULT 12,
                weekly_payment INTEGER,
                interest_payment_cycle_hours INTEGER DEFAULT 504,
                next_principal_date TEXT,
                next_interest_date TEXT,
                total_paid_principal INTEGER DEFAULT 0,
                total_paid_interest INTEGER DEFAULT 0,
                status TEXT DEFAULT 'active',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS loan_payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                loan_id INTEGER,
                user_id TEXT,
                amount INTEGER,
                payment_type TEXT,
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (loan_id) REFERENCES loans (id),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS daily_bonuses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                last_claim_date TEXT,
                streak_count INTEGER DEFAULT 0,
                total_claims INTEGER DEFAULT 0,
                total_bonus_received INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_levels (
                user_id TEXT PRIMARY KEY,
                xp INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                total_xp INTEGER DEFAULT 0,
                messages_count INTEGER DEFAULT 0,
                purchases_count INTEGER DEFAULT 0,
                bonuses_claimed INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS lotteries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                ticket_price INTEGER,
                prize_pool INTEGER DEFAULT 0,
                max_tickets INTEGER,
                tickets_sold INTEGER DEFAULT 0,
                start_date TEXT,
                end_date TEXT,
                status TEXT DEFAULT 'active',
                winner_user_id TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS lottery_tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                lottery_id INTEGER,
                user_id TEXT,
                ticket_number INTEGER,
                purchased_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (lottery_id) REFERENCES lotteries (id),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS broadcasts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                admin_id TEXT,
                message_text TEXT,
                message_type TEXT DEFAULT 'text',
                file_id TEXT,
                sent_count INTEGER DEFAULT 0,
                failed_count INTEGER DEFAULT 0,
                status TEXT DEFAULT 'draft',
                scheduled_for TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                sent_at TEXT
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                notification_type TEXT,
                title TEXT,
                message TEXT,
                is_read BOOLEAN DEFAULT FALSE,
                related_id TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –ö–û–î–û–í–´–• –°–õ–û–í –í–ò–ö–¢–û–†–ò–ù
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quiz_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                quiz_name TEXT NOT NULL,
                xp_reward INTEGER DEFAULT 20,
                max_uses INTEGER DEFAULT 1,
                used_count INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT TRUE,
                created_by TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                expires_at TEXT
            )
        ''')

        # –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–î–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quiz_code_usage (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                code TEXT NOT NULL,
                quiz_name TEXT NOT NULL,
                xp_earned INTEGER NOT NULL,
                used_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                UNIQUE(user_id, code)
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def upgrade_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'google_balance' not in columns:
            print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ google_balance...")
            cursor.execute('ALTER TABLE users ADD COLUMN google_balance INTEGER DEFAULT 0')
            cursor.execute('UPDATE users SET google_balance = balance WHERE google_balance IS NULL')
            print("‚úÖ –ü–æ–ª–µ google_balance –¥–æ–±–∞–≤–ª–µ–Ω–æ")

        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_balance_db()
upgrade_database()


# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ==================
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def wrapper(message):
        user_id = message.from_user.id
        if is_admin(user_id):
            return func(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

    return wrapper


# ================== –§–£–ù–ö–¶–ò–ò GOOGLE –¢–ê–ë–õ–ò–¶ ==================
def load_google_sheets_data(force_refresh=False):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
    global google_sheets_cache

    if not force_refresh and 'data' in google_sheets_cache:
        cache_time = google_sheets_cache.get('timestamp', 0)
        if time.time() - cache_time < CACHE_DURATION:
            print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Sheets")
            return google_sheets_cache['data']

    try:
        sheet_id = GOOGLE_SHEETS_URL.split('/d/')[1].split('/')[0]
        csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"

        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {csv_url}")
        response = requests.get(csv_url, timeout=30)

        if response.status_code == 200:
            response.encoding = 'utf-8'
            csv_data = response.text

            if '    ' in csv_data or '√ê' in csv_data:
                response.encoding = 'cp1251'
                csv_data = response.text

            lines = csv_data.strip().split('\n')
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")

            users_data = {}
            headers = []

            for i, line in enumerate(lines):
                cells = []
                current_cell = ""
                in_quotes = False

                for char in line:
                    if char == '"':
                        in_quotes = not in_quotes
                    elif char == ',' and not in_quotes:
                        cells.append(current_cell.strip())
                        current_cell = ""
                    else:
                        current_cell += char

                if current_cell:
                    cells.append(current_cell.strip())

                cells = [cell.strip('"') for cell in cells]

                if i == 0:
                    headers = cells
                    continue

                if not any(cells) or len(cells) < 4:
                    continue

                user_id = cells[1] if len(cells) > 1 else None

                if user_id and user_id.isdigit():
                    user_name = cells[2] if len(cells) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    credit_column_index = 3
                    if len(cells) > credit_column_index:
                        credit_value = cells[credit_column_index]
                        try:
                            credit_amount = float(credit_value) if credit_value.strip() else 0
                        except ValueError:
                            credit_amount = 0
                    else:
                        credit_amount = 0

                    scores = {}
                    total_score = 0
                    count_3_4 = 0
                    penalty_applied = 0

                    for j in range(5, len(cells)):
                        if j < len(headers) and j < len(cells):
                            column_name = headers[j] if j < len(headers) else f"Column_{j}"
                            cell_value = cells[j]

                            if cell_value and cell_value.strip():
                                try:
                                    numeric_value = int(cell_value)
                                    points = 0

                                    if numeric_value == 1:
                                        points = 10
                                    elif numeric_value == 2:
                                        points = 5
                                    elif numeric_value in [3, 4]:
                                        points = 0
                                        count_3_4 += 1
                                        if count_3_4 > 2:
                                            points = -20
                                            penalty_applied += 1
                                    elif numeric_value == 5:
                                        points = 15
                                    elif numeric_value == 6:
                                        points = 8
                                    elif numeric_value == 7:
                                        points = 20
                                    elif numeric_value == 8:
                                        points = -20
                                    elif numeric_value == 9:
                                        points = 15
                                    elif numeric_value == 10:
                                        points = 15
                                    elif numeric_value == 11:
                                        points = 8
                                    elif numeric_value == 12:
                                        points = 30
                                    elif numeric_value == 13:
                                        points = -30
                                    elif numeric_value == 14:
                                        points = -15
                                    elif numeric_value == 15:
                                        points = -10
                                    elif numeric_value == 16:
                                        points = -15
                                    elif numeric_value == 17:
                                        points = -20
                                    elif numeric_value == 18:
                                        points = -20
                                    elif numeric_value == 19:
                                        points = 15
                                    elif numeric_value == 20:
                                        points = -10
                                    elif numeric_value == 21:
                                        points = 25
                                    elif numeric_value == 22:
                                        points = -25
                                    elif numeric_value == 23:
                                        points = 5
                                    elif numeric_value == 24:
                                        points = 3
                                    else:
                                        points = 0

                                    scores[column_name] = {
                                        'value': numeric_value,
                                        'points': points
                                    }
                                    total_score += points

                                except ValueError:
                                    scores[column_name] = {
                                        'value': cell_value,
                                        'points': 0,
                                        'description': f'–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {cell_value}'
                                    }

                    if penalty_applied > 0:
                        scores['penalty_info'] = {
                            'value': f'–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î',
                            'points': -20 * penalty_applied,
                            'description': f'–®—Ç—Ä–∞—Ñ -20 –±–∞–ª–ª–æ–≤ –∑–∞ {penalty_applied} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞'
                        }

                    users_data[user_id] = {
                        'name': user_name,
                        'scores': scores,
                        'total_score': total_score,
                        'count_3_4': count_3_4,
                        'penalty_applied': penalty_applied,
                        'credit': credit_amount,
                        'raw_data': cells
                    }

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

            google_sheets_cache = {
                'data': users_data,
                'timestamp': time.time()
            }

            return users_data

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status_code}")
            return {}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
        return {}


def calculate_balance_from_google(user_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        users_data = load_google_sheets_data()
        user_id_str = str(user_id)

        if user_id_str in users_data:
            return users_data[user_id_str]['total_score']
        else:
            return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ Google: {e}")
        return 0


def sync_user_balance(user_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Google —Ç–∞–±–ª–∏—Ü–µ–π"""
    try:
        users_data = load_google_sheets_data()
        user_id_str = str(user_id)

        if user_id_str in users_data:
            google_balance = users_data[user_id_str]['total_score']
        else:
            google_balance = 0

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT balance, google_balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if result:
            current_balance, current_google_balance = result

            if current_google_balance != google_balance:
                balance_diff = google_balance - current_google_balance

                if balance_diff != 0:
                    cursor.execute(
                        'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                        (str(user_id), balance_diff, 'google_sync', '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ Google —Ç–∞–±–ª–∏—Ü–µ')
                    )

                    cursor.execute('''
                        SELECT COALESCE(SUM(amount), 0) FROM transactions 
                        WHERE user_id = ? AND type != 'initial'
                    ''', (str(user_id),))

                    total_transactions = cursor.fetchone()[0]
                    new_balance = google_balance + total_transactions

                    cursor.execute(
                        'UPDATE users SET balance = ?, google_balance = ?, google_sync_date = ? WHERE user_id = ?',
                        (new_balance, google_balance, datetime.now().isoformat(), str(user_id))
                    )

                    print(
                        f"‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {user_id} Google: {google_balance} -> –õ–æ–∫–∞–ª—å–Ω—ã–µ: {total_transactions} = –ò—Ç–æ–≥–æ: {new_balance}")
                else:
                    cursor.execute(
                        'UPDATE users SET google_sync_date = ? WHERE user_id = ?',
                        (datetime.now().isoformat(), str(user_id))
                    )
                    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
        else:
            cursor.execute(
                'INSERT INTO users (user_id, balance, credit_balance, google_balance, google_sync_date) VALUES (?, ?, ?, ?, ?)',
                (str(user_id), google_balance, 0, google_balance, datetime.now().isoformat())
            )

            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                (str(user_id), google_balance, 'initial', '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã')
            )

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å –±–∞–ª–∞–Ω—Å–æ–º {google_balance}")

        conn.commit()
        conn.close()

        return google_balance

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


# ================== –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==================
def get_user_balance(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        sync_user_balance(user_id)

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        conn.close()

        if result:
            return result[0]
        else:
            return create_user_in_db(user_id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


def get_user_credit_balance(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT credit_balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        conn.close()

        if result:
            return result[0]
        else:
            create_user_in_db(user_id)
            return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


def create_user_in_db(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        initial_balance = calculate_balance_from_google(user_id)

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'INSERT INTO users (user_id, balance, credit_balance, google_sync_date) VALUES (?, ?, ?, ?)',
            (str(user_id), initial_balance, 0, datetime.now().isoformat())
        )

        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
            (str(user_id), initial_balance, 'initial', '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã')
        )

        cursor.execute(
            'INSERT INTO daily_bonuses (user_id, streak_count, total_claims, total_bonus_received) VALUES (?, ?, ?, ?)',
            (str(user_id), 0, 0, 0)
        )

        cursor.execute(
            'INSERT INTO user_levels (user_id, xp, level, total_xp) VALUES (?, ?, ?, ?)',
            (str(user_id), 0, 1, 0)
        )

        conn.commit()
        conn.close()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å –±–∞–ª–∞–Ω—Å–æ–º {initial_balance}")
        return initial_balance

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        return 0


def update_user_balance(user_id, amount, description, product_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if not result:
            conn.close()
            create_user_in_db(user_id)
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
            result = cursor.fetchone()

        current_balance = result[0]
        new_balance = current_balance + amount

        if new_balance < 0:
            conn.close()
            return False

        cursor.execute(
            'UPDATE users SET balance = ?, updated_at = ? WHERE user_id = ?',
            (new_balance, datetime.now().isoformat(), str(user_id))
        )

        transaction_type = 'purchase' if amount < 0 else 'credit' if amount > 0 else 'other'
        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description, product_id) VALUES (?, ?, ?, ?, ?)',
            (str(user_id), amount, transaction_type, description, product_id)
        )

        conn.commit()
        conn.close()

        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id} {amount:+} = {new_balance} ({description})")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False


def update_user_credit_balance(user_id, amount, description):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT credit_balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if not result:
            conn.close()
            create_user_in_db(user_id)
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT credit_balance FROM users WHERE user_id = ?', (str(user_id),))
            result = cursor.fetchone()

        current_credit = result[0]
        new_credit = current_credit + amount

        cursor.execute(
            'UPDATE users SET credit_balance = ?, updated_at = ? WHERE user_id = ?',
            (new_credit, datetime.now().isoformat(), str(user_id))
        )

        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
            (str(user_id), amount, 'credit_operation', description)
        )

        conn.commit()
        conn.close()

        print(f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id} {amount:+} = {new_credit} ({description})")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False


def get_user_transactions(user_id, limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT amount, type, description, created_at 
            FROM transactions 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        ''', (str(user_id), limit))

        transactions = cursor.fetchall()
        conn.close()

        return transactions

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []


# ================== –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô –ò –û–ü–´–¢–ê ==================
def add_xp(user_id, xp_amount, reason):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT xp, level, total_xp FROM user_levels WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if not result:
            cursor.execute(
                'INSERT INTO user_levels (user_id, xp, level, total_xp) VALUES (?, ?, ?, ?)',
                (str(user_id), xp_amount, 1, xp_amount)
            )
            current_xp = xp_amount
            current_level = 1
            total_xp = xp_amount
        else:
            current_xp = result[0] + xp_amount
            current_level = result[1]
            total_xp = result[2] + xp_amount

            cursor.execute(
                'UPDATE user_levels SET xp = ?, total_xp = ?, updated_at = ? WHERE user_id = ?',
                (current_xp, total_xp, datetime.now().isoformat(), str(user_id))
            )

        new_level = calculate_level(current_xp)
        level_up = False
        level_reward = 0

        if new_level > current_level:
            level_up = True
            cursor.execute(
                'UPDATE user_levels SET level = ? WHERE user_id = ?',
                (new_level, str(user_id))
            )

            reward = LEVELS_CONFIG[new_level]["reward"]
            if reward > 0:
                cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
                user_balance_result = cursor.fetchone()

                if user_balance_result:
                    new_balance = user_balance_result[0] + reward
                    cursor.execute(
                        'UPDATE users SET balance = ?, updated_at = ? WHERE user_id = ?',
                        (new_balance, datetime.now().isoformat(), str(user_id))
                    )

                    cursor.execute(
                        'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                        (str(user_id), reward, 'level_reward', f'–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {new_level} —É—Ä–æ–≤–Ω—è')
                    )

                    level_reward = reward

                    print(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ {new_level} —É—Ä–æ–≤–Ω—è! –ù–∞–≥—Ä–∞–¥–∞: {reward} –±–∞–ª–ª–æ–≤")

        conn.commit()
        conn.close()

        if level_up and level_reward > 0:
            try:
                level_up_message = f"""üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –î–û–°–¢–ò–ì–õ–ò {new_level} –£–†–û–í–ù–Ø!

üèÜ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level} ({LEVELS_CONFIG[new_level]['name']})
üí∞ –ù–∞–≥—Ä–∞–¥–∞: +{level_reward} –±–∞–ª–ª–æ–≤
‚≠ê –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {current_xp}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ"""

                bot.send_message(user_id, level_up_message)

                send_user_notification(
                    user_id,
                    "level_up",
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!",
                    f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level} ({LEVELS_CONFIG[new_level]['name']}) –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {level_reward} –±–∞–ª–ª–æ–≤!",
                    f"level_{new_level}"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–≤–Ω–µ: {e}")

        return level_up, new_level, level_reward

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
        return False, 1, 0


def calculate_level(xp):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
    try:
        sorted_levels = sorted(LEVELS_CONFIG.items(), key=lambda x: x[1]["xp_required"])

        current_level = 1
        for level, config in sorted_levels:
            if xp >= config["xp_required"]:
                current_level = level
            else:
                break

        return current_level
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è: {e}")
        return 1


def get_user_level_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT xp, level, total_xp FROM user_levels WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()
        conn.close()

        if result:
            xp, level, total_xp = result
            next_level = level + 1
            if next_level in LEVELS_CONFIG:
                xp_required = LEVELS_CONFIG[next_level]["xp_required"]
                xp_needed = xp_required - xp
            else:
                xp_required = "–ú–∞–∫—Å."
                xp_needed = 0

            return {
                'level': level,
                'xp': xp,
                'total_xp': total_xp,
                'level_name': LEVELS_CONFIG[level]["name"],
                'next_level': next_level,
                'xp_needed': xp_needed,
                'xp_required': xp_required
            }
        else:
            add_xp(user_id, 0, "initial")
            return get_user_level_info(user_id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ: {e}")
        return None


def show_levels_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π"""
    user_id = str(message.from_user.id)
    level_info = get_user_level_info(user_id)

    if not level_info:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω—è—Ö")
        return

    levels_text = f"""üèÜ –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô

üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:
‚Ä¢ üéØ –£—Ä–æ–≤–µ–Ω—å: {level_info['level']} ({level_info['level_name']})
‚Ä¢ ‚≠ê –û–ø—ã—Ç: {level_info['xp']} / {level_info['xp_required']}
‚Ä¢ üí´ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {level_info['xp_needed']} –æ–ø—ã—Ç–∞
‚Ä¢ üìà –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: {level_info['total_xp']}

üéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–Ω–∏:"""

    for level in range(2, min(level_info['level'] + 4, len(LEVELS_CONFIG) + 1)):
        if level in LEVELS_CONFIG:
            reward = LEVELS_CONFIG[level]["reward"]
            levels_text += f"\n‚Ä¢ {level} —É—Ä–æ–≤–µ–Ω—å: {reward} –±–∞–ª–ª–æ–≤"

    levels_text += f"\n\nüéØ –ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç:"
    levels_text += f"\n‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{XP_REWARDS['daily_bonus']} –æ–ø—ã—Ç–∞"
    levels_text += f"\n‚Ä¢ üõí –ü–æ–∫—É–ø–∫–∏: +{XP_REWARDS['purchase']} –∑–∞ –∫–∞–∂–¥—ã–µ 100 –±–∞–ª–ª–æ–≤"
    levels_text += f"\n‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: +{XP_REWARDS['suggestion']} –æ–ø—ã—Ç–∞"
    levels_text += f"\n‚Ä¢ üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã: +{XP_REWARDS['quiz_participation']} –æ–ø—ã—Ç–∞"
    levels_text += f"\n‚Ä¢ üí∞ –ö—Ä–µ–¥–∏—Ç—ã: +{XP_REWARDS['loan_taken']} –∑–∞ –≤–∑—è—Ç–∏–µ, +{XP_REWARDS['loan_repaid']} –∑–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ"
    levels_text += f"\n‚Ä¢ üé™ –õ–æ—Ç–µ—Ä–µ–∏: +{XP_REWARDS['lottery_purchase']} –∑–∞ –±–∏–ª–µ—Ç"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))

    bot.send_message(user_id, levels_text, reply_markup=markup)


# ================== –°–ò–°–¢–ï–ú–ê –ï–ñ–ï–î–ù–ï–í–ù–´–• –ë–û–ù–£–°–û–í ==================
def get_daily_bonus_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'SELECT last_claim_date, streak_count, total_claims, total_bonus_received FROM daily_bonuses WHERE user_id = ?',
            (str(user_id),)
        )
        result = cursor.fetchone()
        conn.close()

        if result:
            return {
                'last_claim_date': result[0],
                'streak_count': result[1],
                'total_claims': result[2],
                'total_bonus_received': result[3]
            }
        else:
            create_daily_bonus_user(str(user_id))
            return {
                'last_claim_date': None,
                'streak_count': 0,
                'total_claims': 0,
                'total_bonus_received': 0
            }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–µ: {e}")
        return None


def create_daily_bonus_user(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –±–æ–Ω—É—Å–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'INSERT INTO daily_bonuses (user_id, streak_count, total_claims, total_bonus_received) VALUES (?, ?, ?, ?)',
            (str(user_id), 0, 0, 0)
        )

        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–Ω—É—Å–æ–≤: {e}")
        return False


def can_claim_bonus(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"""
    bonus_info = get_daily_bonus_info(user_id)
    if not bonus_info or not bonus_info['last_claim_date']:
        return True, 0

    last_claim = datetime.fromisoformat(bonus_info['last_claim_date'])
    now = datetime.now()

    if last_claim.date() < now.date():
        days_passed = (now.date() - last_claim.date()).days
        if days_passed == 1:
            return True, bonus_info['streak_count'] + 1
        else:
            return True, 1
    else:
        return False, bonus_info['streak_count']


def generate_daily_bonus(streak):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
    rand = random.random()
    cumulative_prob = 0

    for variant in DAILY_BONUS_VARIANTS:
        cumulative_prob += variant['probability']
        if rand <= cumulative_prob:
            base_bonus = random.randint(variant['min'], variant['max'])
            break
    else:
        base_bonus = random.randint(5, 15)

    streak_bonus = 0
    if streak in BONUS_STREAK_REWARDS:
        streak_bonus = BONUS_STREAK_REWARDS[streak]

    total_bonus = base_bonus + streak_bonus

    return base_bonus, streak_bonus, total_bonus


def claim_daily_bonus(user_id):
    """–í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        can_claim, new_streak = can_claim_bonus(user_id)

        if not can_claim:
            return False, "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞! üéÅ"

        base_bonus, streak_bonus, total_bonus = generate_daily_bonus(new_streak)

        success = update_user_balance(
            user_id,
            total_bonus,
            'daily_bonus',
            f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Å—Ç—Ä–∏–∫: {new_streak} –¥–Ω–µ–π)'
        )

        if not success:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞"

        conn = get_db_connection()
        cursor = conn.cursor()

        bonus_info = get_daily_bonus_info(user_id)
        if bonus_info:
            cursor.execute('''
                UPDATE daily_bonuses 
                SET last_claim_date = ?, streak_count = ?, total_claims = total_claims + 1, 
                    total_bonus_received = total_bonus_received + ?, updated_at = ?
                WHERE user_id = ?
            ''', (
                datetime.now().isoformat(),
                new_streak,
                total_bonus,
                datetime.now().isoformat(),
                str(user_id)
            ))
        else:
            cursor.execute('''
                INSERT INTO daily_bonuses (user_id, last_claim_date, streak_count, total_claims, total_bonus_received)
                VALUES (?, ?, ?, 1, ?)
            ''', (
                str(user_id),
                datetime.now().isoformat(),
                new_streak,
                total_bonus
            ))

        conn.commit()
        conn.close()

        add_xp(user_id, XP_REWARDS["daily_bonus"], "daily_bonus")

        message = f"""üéâ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–û–õ–£–ß–ï–ù!

üí∞ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ–Ω—É—Å: {base_bonus} –±–∞–ª–ª–æ–≤"""

        if streak_bonus > 0:
            message += f"\nüèÜ –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é ({new_streak} –¥–Ω–µ–π): +{streak_bonus} –±–∞–ª–ª–æ–≤"

        message += f"\nüíé –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {total_bonus} –±–∞–ª–ª–æ–≤"
        message += f"\nüìÖ –°–µ—Ä–∏—è: {new_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
        message += f"\nüéØ –û–ø—ã—Ç: +{XP_REWARDS['daily_bonus']}"
        message += f"\n\nüí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"

        return True, message

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞: {e}")
        return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞"


def handle_daily_bonus(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    user_id = str(message.from_user.id)

    processing_msg = bot.send_message(user_id, "üéÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –±–æ–Ω—É—Å...")

    success, result_message = claim_daily_bonus(user_id)

    bot.delete_message(user_id, processing_msg.message_id)

    bonus_info = get_daily_bonus_info(user_id)

    if bonus_info and success:
        stats_text = f"\n\nüìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        stats_text += f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {bonus_info['streak_count']} –¥–Ω–µ–π\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {bonus_info['total_claims']} —Ä–∞–∑\n"
        stats_text += f"‚Ä¢ –°—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {bonus_info['total_bonus_received']} –±–∞–ª–ª–æ–≤"

        result_message += stats_text

    if success:
        next_streak = None
        current_streak = bonus_info['streak_count'] if bonus_info else 0

        for streak in sorted(BONUS_STREAK_REWARDS.keys()):
            if streak > current_streak:
                next_streak = streak
                break

        if next_streak:
            days_needed = next_streak - current_streak
            result_message += f"\n\nüéØ –î–æ –±–æ–Ω—É—Å–∞ –∑–∞ {next_streak} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_needed} –¥–Ω–µ–π"

    bot.send_message(user_id, result_message)


# ================== –°–ò–°–¢–ï–ú–ê –í–ò–ö–¢–û–†–ò–ù –° –ö–û–î–û–í–´–ú–ò –°–õ–û–í–ê–ú–ò ==================
def create_quiz_code(code, quiz_name, xp_reward=20, max_uses=1, created_by="admin", expires_days=30):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
        cursor.execute('SELECT id FROM quiz_codes WHERE code = ?', (code.upper(),))
        if cursor.fetchone():
            conn.close()
            return False

        expires_at = (datetime.now() + timedelta(days=expires_days)).isoformat() if expires_days else None

        cursor.execute('''
            INSERT INTO quiz_codes (code, quiz_name, xp_reward, max_uses, created_by, expires_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (code.upper(), quiz_name, xp_reward, max_uses, created_by, expires_at))

        conn.commit()
        conn.close()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {code} –¥–ª—è '{quiz_name}'")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            notification = f"üî§ –°–û–ó–î–ê–ù –ù–û–í–´–ô –ö–û–î –í–ò–ö–¢–û–†–ò–ù–´\n\nüìù {quiz_name}\nüî§ –ö–æ–¥: {code}\n‚≠ê –û–ø—ã—Ç: {xp_reward}\nüé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}"
            bot.send_message(SUGGESTIONS_CHANNEL, notification)
        except:
            pass

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False


def use_quiz_code(user_id, code):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        cursor.execute('''
            SELECT id, quiz_name, xp_reward, max_uses, used_count, is_active, expires_at 
            FROM quiz_codes 
            WHERE code = ?
        ''', (code.upper(),))

        code_data = cursor.fetchone()

        if not code_data:
            conn.close()
            return False, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        code_id, quiz_name, xp_reward, max_uses, used_count, is_active, expires_at = code_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        if not is_active:
            conn.close()
            return False, "‚ùå –ö–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if expires_at:
            expires_date = datetime.fromisoformat(expires_at)
            if datetime.now() > expires_date:
                cursor.execute('UPDATE quiz_codes SET is_active = FALSE WHERE id = ?', (code_id,))
                conn.commit()
                conn.close()
                return False, "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if used_count >= max_uses:
            cursor.execute('UPDATE quiz_codes SET is_active = FALSE WHERE id = ?', (code_id,))
            conn.commit()
            conn.close()
            return False, "‚ùå –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–æ–¥
        cursor.execute('''
            SELECT id FROM quiz_code_usage 
            WHERE user_id = ? AND code = ?
        ''', (str(user_id), code.upper()))

        if cursor.fetchone():
            conn.close()
            return False, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥!"

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
        level_up, new_level, reward = add_xp(user_id, xp_reward, f"quiz_{quiz_name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞
        cursor.execute('''
            UPDATE quiz_codes 
            SET used_count = used_count + 1 
            WHERE id = ?
        ''', (code_id,))

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        cursor.execute('''
            INSERT INTO quiz_code_usage (user_id, code, quiz_name, xp_earned)
            VALUES (?, ?, ?, ?)
        ''', (str(user_id), code.upper(), quiz_name, xp_reward))

        conn.commit()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = f"""üéØ –í–ò–ö–¢–û–†–ò–ù–ê –ü–†–û–ô–î–ï–ù–ê!

üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {quiz_name}
‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{xp_reward}"""

        if level_up:
            success_message += f"\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!"
            success_message += f"\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: +{reward} –±–∞–ª–ª–æ–≤"

        success_message += f"\n\n‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"

        return True, success_message

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞"


def get_active_quiz_codes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT code, quiz_name, xp_reward, max_uses, used_count, expires_at
            FROM quiz_codes 
            WHERE is_active = TRUE
            ORDER BY created_at DESC
        ''')

        codes = cursor.fetchall()
        conn.close()
        return codes
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤: {e}")
        return []


def get_user_quiz_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT quiz_name, xp_earned, used_at 
            FROM quiz_code_usage 
            WHERE user_id = ?
            ORDER BY used_at DESC
        ''', (str(user_id),))

        history = cursor.fetchall()
        conn.close()
        return history
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")
        return []


def handle_quiz_code(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω"""
    user_id = str(message.from_user.id)
    code = message.text.strip().upper()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã
    if len(code) < 4 or code in ["üîô –ù–ê–ó–ê–î", "üîô –û–¢–ú–ï–ù–ê", "–ù–ê–ó–ê–î", "–û–¢–ú–ï–ù–ê"]:
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(user_id, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥
    success, result_message = use_quiz_code(user_id, code)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bot.delete_message(user_id, processing_msg.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(user_id, result_message)

    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    if success:
        show_quizzes_menu(message)


def show_quizzes_menu(message):
    user_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quiz_history = get_user_quiz_history(user_id)

    quizzes_text = """üéØ –í–ò–ö–¢–û–†–ò–ù–´

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã!

üìù –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
2. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ Google Forms
3. –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥

üí° –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: +20 –æ–ø—ã—Ç–∞"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω
    if quiz_history:
        quizzes_text += "\n\nüìä –í–∞—à–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n"
        for quiz_name, xp_earned, used_at in quiz_history[:5]:
            date_str = datetime.fromisoformat(used_at).strftime('%d.%m.%Y')
            quizzes_text += f"‚Ä¢ {quiz_name} - +{xp_earned} –æ–ø—ã—Ç–∞ ({date_str})\n"

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üß™ –•–ò–ú–ò–Ø",
                                   url="https://docs.google.com/forms/d/1iaTFJP18arcNkgzio_z7h0yd-mA0L8HndX4D3VCBjOw/edit"),
        types.InlineKeyboardButton("üìö –†–£–°–°–ö–ò–ô –Ø–ó–´–ö",
                                   url="https://docs.google.com/forms/d/19ehazW1CMK24Xw9qRoM9fKSzsFOXbIydGEiv16UOkZc/edit"),
        types.InlineKeyboardButton("üéØ –ü–†–û–§–ò–õ–¨",
                                   url="https://docs.google.com/forms/d/1o0ec2Qae3oqKrABPHGZY3iCBcvxgs6eYZ0vs9tqDlo0/edit"),
        types.InlineKeyboardButton("üî¢ –ë–ê–ó–ê",
                                   url="https://docs.google.com/forms/d/1fa_NDfNVXmEWGhC2hh114c_NXIq19kC5htTMW9558cg/edit")
    )

    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    reply_markup.add(types.KeyboardButton("üìä –ú–æ–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"))
    reply_markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))

    bot.send_message(message.from_user.id, quizzes_text, reply_markup=reply_markup)
    bot.send_message(message.from_user.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:", reply_markup=markup)


def show_my_quizzes(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    quiz_history = get_user_quiz_history(user_id)

    if quiz_history:
        history_text = "üìä –ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –í–ò–ö–¢–û–†–ò–ù\n\n"
        total_xp = 0

        for quiz_name, xp_earned, used_at in quiz_history:
            date_str = datetime.fromisoformat(used_at).strftime('%d.%m.%Y %H:%M')
            history_text += f"üéØ {quiz_name}\n"
            history_text += f"   ‚≠ê +{xp_earned} –æ–ø—ã—Ç–∞\n"
            history_text += f"   üìÖ {date_str}\n\n"
            total_xp += xp_earned

        history_text += f"üí´ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: {total_xp}"
    else:
        history_text = "üìä –ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –í–ò–ö–¢–û–†–ò–ù\n\n"
        history_text += "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n"
        history_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç! üéØ"

    bot.send_message(user_id, history_text)


def create_initial_quiz_codes():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM quiz_codes')
        code_count = cursor.fetchone()[0]
        conn.close()

        if code_count == 0:
            test_codes = [
                ("CHEM001", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ö–∏–º–∏–∏", 20, 50),
                ("MATH001", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", 20, 50),
                ("RUS001", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É", 20, 50),
            ]

            for code, name, xp, uses in test_codes:
                create_quiz_code(code, name, xp, uses, "system", expires_days=365)

            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã: {e}")


# ================== –°–ò–°–¢–ï–ú–ê –õ–û–¢–ï–†–ï–ô –ò –†–û–ó–´–ì–†–´–®–ï–ô ==================
def create_lottery(name, description, ticket_price, max_tickets, duration_days=7):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        start_date = datetime.now()
        end_date = start_date + timedelta(days=duration_days)

        cursor.execute('''
            INSERT INTO lotteries (name, description, ticket_price, max_tickets, start_date, end_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (name, description, ticket_price, max_tickets,
              start_date.isoformat(), end_date.isoformat()))

        lottery_id = cursor.lastrowid
        conn.commit()
        conn.close()

        send_broadcast_to_all(
            "üé™ –ù–û–í–ê–Ø –õ–û–¢–ï–†–ï–Ø!",
            f"üé∞ {name}\n\n{description}\n\nüé´ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {ticket_price} –±–∞–ª–ª–æ–≤\nüí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: —Ä–∞—Å—Ç–µ—Ç!\n‚è∞ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –¥–æ {end_date.strftime('%d.%m.%Y %H:%M')}"
        )

        return lottery_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: {e}")
        return None


def buy_lottery_ticket(user_id, lottery_id, ticket_count=1):
    """–ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT name, ticket_price, max_tickets, tickets_sold, status FROM lotteries WHERE id = ?',
                       (lottery_id,))
        lottery = cursor.fetchone()

        if not lottery or lottery[4] != 'active':
            conn.close()
            return False, "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

        lottery_name, ticket_price, max_tickets, tickets_sold, status = lottery

        total_cost = ticket_price * ticket_count

        if tickets_sold + ticket_count > max_tickets:
            conn.close()
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"

        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (str(user_id),))
        user_balance_result = cursor.fetchone()

        if not user_balance_result:
            conn.close()
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        user_balance = user_balance_result[0]

        if user_balance < total_cost:
            conn.close()
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ: {total_cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: {user_balance}"

        new_balance = user_balance - total_cost
        cursor.execute(
            'UPDATE users SET balance = ?, updated_at = ? WHERE user_id = ?',
            (new_balance, datetime.now().isoformat(), str(user_id))
        )

        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
            (str(user_id), -total_cost, 'purchase', f'–ü–æ–∫—É–ø–∫–∞ {ticket_count} –±–∏–ª–µ—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏ "{lottery_name}"')
        )

        ticket_numbers = []
        for i in range(ticket_count):
            ticket_number = tickets_sold + i + 1
            cursor.execute('''
                INSERT INTO lottery_tickets (lottery_id, user_id, ticket_number)
                VALUES (?, ?, ?)
            ''', (lottery_id, str(user_id), ticket_number))
            ticket_numbers.append(ticket_number)

        cursor.execute('''
            UPDATE lotteries 
            SET tickets_sold = tickets_sold + ?, prize_pool = prize_pool + ? 
            WHERE id = ?
        ''', (ticket_count, total_cost, lottery_id))

        conn.commit()
        conn.close()

        add_xp(user_id, XP_REWARDS["lottery_purchase"] * ticket_count, "lottery_purchase")

        numbers_str = ", ".join(map(str, ticket_numbers))
        return True, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {ticket_count} –±–∏–ª–µ—Ç(–∞/–æ–≤) –≤ –ª–æ—Ç–µ—Ä–µ–µ '{lottery_name}'! –ù–æ–º–µ—Ä–∞: {numbers_str}"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞"


def draw_lottery_winner(lottery_id):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT name, prize_pool, tickets_sold FROM lotteries WHERE id = ?', (lottery_id,))
        lottery = cursor.fetchone()

        if not lottery or lottery[2] == 0:
            return False, "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–æ—Ç–µ—Ä–µ–µ"

        lottery_name, prize_pool, tickets_sold = lottery

        cursor.execute('''
            SELECT user_id FROM lottery_tickets 
            WHERE lottery_id = ? 
            ORDER BY RANDOM() 
            LIMIT 1
        ''', (lottery_id,))

        winner = cursor.fetchone()

        if winner:
            winner_user_id = winner[0]

            update_user_balance(winner_user_id, prize_pool, 'lottery_win', f'–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ #{lottery_id}')

            cursor.execute('''
                UPDATE lotteries 
                SET winner_user_id = ?, status = 'finished' 
                WHERE id = ?
            ''', (winner_user_id, lottery_id))

            conn.commit()
            conn.close()

            send_user_notification(
                winner_user_id,
                "lottery_win",
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ!",
                f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize_pool} –±–∞–ª–ª–æ–≤ –≤ –ª–æ—Ç–µ—Ä–µ–µ '{lottery_name}'!",
                f"lottery_{lottery_id}"
            )

            send_broadcast_to_all(
                "üéä –†–û–ó–´–ì–†–´–® –õ–û–¢–ï–†–ï–ò –ó–ê–í–ï–†–®–ï–ù!",
                f"–õ–æ—Ç–µ—Ä–µ—è '{lottery_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {winner_user_id}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {prize_pool} –±–∞–ª–ª–æ–≤\nüé´ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tickets_sold}"
            )

            return True, winner_user_id, prize_pool
        else:
            conn.close()
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ª–æ—Ç–µ—Ä–µ–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}", 0


def generate_updated_lottery_message(lottery_id, user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–æ—Ç–µ—Ä–µ–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT name, description, ticket_price, prize_pool, max_tickets, tickets_sold, end_date 
            FROM lotteries 
            WHERE id = ?
        ''', (lottery_id,))

        lottery = cursor.fetchone()

        if not lottery:
            return "‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", None

        name, description, ticket_price, prize_pool, max_tickets, tickets_sold, end_date = lottery

        cursor.execute('SELECT COUNT(*) FROM lottery_tickets WHERE lottery_id = ? AND user_id = ?',
                       (lottery_id, user_id))
        user_tickets = cursor.fetchone()[0]

        conn.close()

        end_date_obj = datetime.fromisoformat(end_date)
        time_left = end_date_obj - datetime.now()
        days_left = time_left.days
        hours_left = time_left.seconds // 3600

        lottery_text = f"üé∞ *{name}*\n\n"
        lottery_text += f"üìù {description}\n\n"
        lottery_text += f"üí∞ *–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:* {prize_pool} –±–∞–ª–ª–æ–≤\n"
        lottery_text += f"üé´ *–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞:* {ticket_price} –±–∞–ª–ª–æ–≤\n"
        lottery_text += f"üìä *–ü—Ä–æ–¥–∞–Ω–æ:* {tickets_sold}/{max_tickets} –±–∏–ª–µ—Ç–æ–≤\n"
        lottery_text += f"üéØ *–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:* {user_tickets} —à—Ç.\n"
        lottery_text += f"‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* {days_left}–¥ {hours_left}—á\n"

        markup = types.InlineKeyboardMarkup()

        if tickets_sold < max_tickets:
            markup.add(
                types.InlineKeyboardButton(
                    f"üé´ –ö—É–ø–∏—Ç—å 1 –±–∏–ª–µ—Ç ({ticket_price} –±–∞–ª–ª–æ–≤)",
                    callback_data=f"buy_ticket_{lottery_id}_1"
                )
            )

            if tickets_sold + 5 <= max_tickets:
                markup.add(
                    types.InlineKeyboardButton(
                        f"üé´ –ö—É–ø–∏—Ç—å 5 –±–∏–ª–µ—Ç–æ–≤ ({ticket_price * 5} –±–∞–ª–ª–æ–≤)",
                        callback_data=f"buy_ticket_{lottery_id}_5"
                    )
                )

        markup.add(
            types.InlineKeyboardButton(
                "üìä –ú–æ–∏ –±–∏–ª–µ—Ç—ã",
                callback_data=f"my_tickets_{lottery_id}"
            )
        )

        return lottery_text, markup

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", None


def show_lottery_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–æ—Ç–µ—Ä–µ–∏"""
    user_id = str(message.from_user.id)

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, name, description, ticket_price, prize_pool, max_tickets, tickets_sold, end_date 
            FROM lotteries 
            WHERE status = 'active'
            ORDER BY created_at DESC
        ''')

        lotteries = cursor.fetchall()
        conn.close()

        if not lotteries:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))
            bot.send_message(
                user_id,
                "üé≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üì¢",
                reply_markup=markup
            )
            return

        bot.send_message(user_id, "üé™ *–õ–û–¢–ï–†–ï–ò –ò –†–û–ó–´–ì–†–´–®–ò*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –¥–ª—è —É—á–∞—Å—Ç–∏—è:", parse_mode='Markdown')

        for lottery in lotteries:
            lottery_id, name, description, ticket_price, prize_pool, max_tickets, tickets_sold, end_date = lottery

            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM lottery_tickets WHERE lottery_id = ? AND user_id = ?',
                           (lottery_id, user_id))
            user_tickets = cursor.fetchone()[0]
            conn.close()

            end_date_obj = datetime.fromisoformat(end_date)
            time_left = end_date_obj - datetime.now()
            days_left = time_left.days
            hours_left = time_left.seconds // 3600

            lottery_text = f"üé∞ *{name}*\n\n"
            lottery_text += f"üìù {description}\n\n"
            lottery_text += f"üí∞ *–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:* {prize_pool} –±–∞–ª–ª–æ–≤\n"
            lottery_text += f"üé´ *–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞:* {ticket_price} –±–∞–ª–ª–æ–≤\n"
            lottery_text += f"üìä *–ü—Ä–æ–¥–∞–Ω–æ:* {tickets_sold}/{max_tickets} –±–∏–ª–µ—Ç–æ–≤\n"
            lottery_text += f"üéØ *–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:* {user_tickets} —à—Ç.\n"
            lottery_text += f"‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* {days_left}–¥ {hours_left}—á"

            markup = types.InlineKeyboardMarkup()

            if tickets_sold < max_tickets:
                markup.add(
                    types.InlineKeyboardButton(
                        f"üé´ –ö—É–ø–∏—Ç—å 1 –±–∏–ª–µ—Ç ({ticket_price} –±–∞–ª–ª–æ–≤)",
                        callback_data=f"buy_ticket_{lottery_id}_1"
                    )
                )

                if tickets_sold + 5 <= max_tickets:
                    markup.add(
                        types.InlineKeyboardButton(
                            f"üé´ –ö—É–ø–∏—Ç—å 5 –±–∏–ª–µ—Ç–æ–≤ ({ticket_price * 5} –±–∞–ª–ª–æ–≤)",
                            callback_data=f"buy_ticket_{lottery_id}_5"
                        )
                    )

            markup.add(
                types.InlineKeyboardButton(
                    "üìä –ú–æ–∏ –±–∏–ª–µ—Ç—ã",
                    callback_data=f"my_tickets_{lottery_id}"
                )
            )

            bot.send_message(user_id, lottery_text, reply_markup=markup, parse_mode='Markdown')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ª–æ—Ç–µ—Ä–µ–∏: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–µ—Ä–µ–π")


def show_my_tickets(user_id, lottery_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ—Ç–µ—Ä–µ–µ"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT name FROM lotteries WHERE id = ?', (lottery_id,))
        lottery_name = cursor.fetchone()[0]

        cursor.execute('''
            SELECT ticket_number FROM lottery_tickets 
            WHERE lottery_id = ? AND user_id = ? 
            ORDER BY ticket_number
        ''', (lottery_id, user_id))

        tickets = cursor.fetchall()
        conn.close()

        if tickets:
            ticket_numbers = [str(ticket[0]) for ticket in tickets]
            tickets_text = f"üé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã –≤ –ª–æ—Ç–µ—Ä–µ–µ '{lottery_name}':\n\n"
            tickets_text += ", ".join(ticket_numbers)
            tickets_text += f"\n\n–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {len(tickets)}"

            bot.send_message(user_id, tickets_text)
        else:
            bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –ª–æ—Ç–µ—Ä–µ–µ '{lottery_name}'")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤")


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ==================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = str(call.from_user.id)

    if call.from_user.is_bot:
        try:
            bot.answer_callback_query(call.id, "‚ùå –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö")
        except:
            pass
        return

    try:
        if call.data.startswith('buy_ticket_'):
            handle_ticket_purchase(call)
        elif call.data.startswith('my_tickets_'):
            handle_my_tickets(call)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ callback: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass


def handle_ticket_purchase(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤"""
    user_id = str(call.from_user.id)

    try:
        parts = call.data.replace('buy_ticket_', '').split('_')
        lottery_id = int(parts[0])
        ticket_count = int(parts[1])

        bot.answer_callback_query(call.id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É...")

        success, message = buy_lottery_ticket(user_id, lottery_id, ticket_count)

        if success:
            updated_text, updated_markup = generate_updated_lottery_message(lottery_id, user_id)

            try:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text=updated_text,
                    reply_markup=updated_markup
                )
                bot.answer_callback_query(call.id, "‚úÖ –ë–∏–ª–µ—Ç—ã –∫—É–ø–ª–µ–Ω—ã!")
            except Exception as edit_error:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                bot.send_message(user_id, f"‚úÖ {message}")
        else:
            bot.answer_callback_query(call.id, f"‚ùå {message}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞")
        except:
            pass


def handle_my_tickets(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(call.from_user.id)

    try:
        lottery_id = int(call.data.replace('my_tickets_', ''))
        show_my_tickets(user_id, lottery_id)
        bot.answer_callback_query(call.id, "üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—à–∏ –±–∏–ª–µ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤: {e}")
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤")
        except:
            pass


# ================== –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==================
def create_broadcast(admin_id, message_text, message_type='text', file_id=None, schedule_delay_minutes=0):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        scheduled_for = None
        if schedule_delay_minutes > 0:
            scheduled_for = (datetime.now() + timedelta(minutes=schedule_delay_minutes)).isoformat()

        cursor.execute('''
            INSERT INTO broadcasts (admin_id, message_text, message_type, file_id, scheduled_for, status)
            VALUES (?, ?, ?, ?, ?, 'scheduled')
        ''', (str(admin_id), message_text, message_type, file_id, scheduled_for))

        broadcast_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return broadcast_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return None


def send_broadcast(broadcast_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT message_text, message_type, file_id FROM broadcasts WHERE id = ?', (broadcast_id,))
        broadcast = cursor.fetchone()

        if not broadcast:
            return False, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        message_text, message_type, file_id = broadcast

        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()

        sent_count = 0
        failed_count = 0

        cursor.execute('UPDATE broadcasts SET status = "sending" WHERE id = ?', (broadcast_id,))
        conn.commit()

        for user_tuple in users:
            user_id = user_tuple[0]
            try:
                if message_type == 'photo' and file_id:
                    bot.send_photo(user_id, file_id, caption=message_text)
                elif message_type == 'document' and file_id:
                    bot.send_document(user_id, file_id, caption=message_text)
                else:
                    bot.send_message(user_id, message_text)

                sent_count += 1
                time.sleep(0.1)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1

        cursor.execute('''
            UPDATE broadcasts 
            SET sent_count = ?, failed_count = ?, status = 'sent', sent_at = ?
            WHERE id = ?
        ''', (sent_count, failed_count, datetime.now().isoformat(), broadcast_id))

        conn.commit()
        conn.close()

        return True, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}"


def send_broadcast_to_all(title, message):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        conn.close()

        message_text = f"üîî {title}\n\n{message}"

        sent_count = 0
        failed_count = 0

        for user_tuple in users:
            user_id = user_tuple[0]
            try:
                bot.send_message(user_id, message_text)
                sent_count += 1
                time.sleep(0.05)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1

        print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return False


def send_user_notification(user_id, notification_type, title, message, related_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO user_notifications (user_id, notification_type, title, message, related_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (str(user_id), notification_type, title, message, related_id))

        conn.commit()
        conn.close()

        notification_text = f"üîî {title}\n\n{message}"
        bot.send_message(user_id, notification_text)

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


# ================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==================
@admin_required
def admin_broadcast_menu(message):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = str(message.from_user.id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"))
    markup.add(types.KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"))
    markup.add(types.KeyboardButton("üé™ –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é"))
    markup.add(types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏"))
    markup.add(types.KeyboardButton("üßπ –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏"))
    markup.add(types.KeyboardButton("üî§ –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"))
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω"))
    markup.add(types.KeyboardButton("üé∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"))
    markup.add(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à Google"))
    markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))

    bot.send_message(user_id, "üì¢ –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def start_broadcast_creation(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    user_id = str(message.from_user.id)
    user_states[user_id] = 'creating_broadcast'

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

    bot.send_message(
        user_id,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown:\n"
        "*–∂–∏—Ä–Ω—ã–π* —Ç–µ–∫—Å—Ç\n"
        "_–∫—É—Ä—Å–∏–≤_ —Ç–µ–∫—Å—Ç\n"
        "`–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π` —Ç–µ–∫—Å—Ç\n"
        "[—Å—Å—ã–ª–∫–∞](https://example.com)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –û—Ç–º–µ–Ω–∞'",
        reply_markup=markup,
        parse_mode='Markdown'
    )


def handle_admin_broadcast_creation(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = str(message.from_user.id)

    if message.text in ["üîô –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üîô –í –º–µ–Ω—é"]:
        user_states[user_id] = None
        start(message)
        return

    if user_id in user_states and user_states[user_id] == 'creating_broadcast':
        try:
            broadcast_text = message.text

            if len(broadcast_text.strip()) < 5:
                bot.send_message(user_id, "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
                return

            broadcast_id = create_broadcast(user_id, broadcast_text)

            if broadcast_id:
                success, result = send_broadcast(broadcast_id)

                if success:
                    bot.send_message(user_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n{result}")
                else:
                    bot.send_message(user_id, f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n{result}")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")

        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        user_states[user_id] = None
        admin_broadcast_menu(message)


def handle_admin_broadcast_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = str(message.from_user.id)

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT 
                COUNT(*) as total,
                SUM(sent_count) as total_sent,
                SUM(failed_count) as total_failed,
                AVG(sent_count) as avg_sent
            FROM broadcasts 
            WHERE status = 'sent'
        ''')
        stats = cursor.fetchone()

        cursor.execute('''
            SELECT message_text, sent_count, failed_count, sent_at 
            FROM broadcasts 
            WHERE status = 'sent'
            ORDER BY sent_at DESC 
            LIMIT 5
        ''')
        recent_broadcasts = cursor.fetchall()

        conn.close()

        if stats and stats[0] > 0:
            total, total_sent, total_failed, avg_sent = stats

            stats_text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–û–ö\n\n"
            stats_text += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total}\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent or 0} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_failed or 0}\n"
            stats_text += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {avg_sent or 0:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"

            stats_text += f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"

            for i, (msg_text, sent, failed, sent_at) in enumerate(recent_broadcasts, 1):
                preview = msg_text[:50] + "..." if len(msg_text) > 50 else msg_text
                sent_date = datetime.fromisoformat(sent_at).strftime('%d.%m.%Y %H:%M') if sent_at else "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"

                stats_text += f"{i}. {preview}\n"
                stats_text += f"   üì§ {sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ‚ùå {failed} –æ—à–∏–±–æ–∫\n"
                stats_text += f"   üïí {sent_date}\n\n"

        else:
            stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–û–ö\n\n"
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.\n"
            stats_text += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."

        bot.send_message(user_id, stats_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫")

def start_quiz_code_creation(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = str(message.from_user.id)
    user_states[user_id] = 'creating_quiz_code'

    instruction = """üî§ –°–û–ó–î–ê–ù–ò–ï –ö–û–î–ê –í–ò–ö–¢–û–†–ò–ù–´

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–æ–¥|–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XP|–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ CHEM001|–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ö–∏–º–∏–∏|20|50
‚Ä¢ MATH2024|–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö|15|100
‚Ä¢ RUSSIAN01|–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Ç–µ—Å—Ç|25|1

üìù –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π:
‚Ä¢ –ö–æ–¥ - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã)
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
‚Ä¢ XP - –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ (10-50)
‚Ä¢ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –û—Ç–º–µ–Ω–∞'"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

    bot.send_message(user_id, instruction, reply_markup=markup)

def handle_quiz_code_creation(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = str(message.from_user.id)

    if message.text in ["üîô –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üîô –í –º–µ–Ω—é"]:
        user_states[user_id] = None
        admin_broadcast_menu(message)
        return

    if user_id in user_states and user_states[user_id] == 'creating_quiz_code':
        try:
            parts = message.text.split('|')
            if len(parts) != 4:
                bot.send_message(user_id,
                               "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                               "–ö–æ–¥|–ù–∞–∑–≤–∞–Ω–∏–µ|XP|–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n"
                               "–ü—Ä–∏–º–µ—Ä: CHEM001|–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ö–∏–º–∏–∏|20|50")
                return

            code = parts[0].strip().upper()
            quiz_name = parts[1].strip()
            xp_reward = int(parts[2].strip())
            max_uses = int(parts[3].strip())

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not code.isalnum():
                bot.send_message(user_id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)")
                return

            if len(code) < 3:
                bot.send_message(user_id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
                return

            if xp_reward < 10 or xp_reward > 50:
                bot.send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 50")
                return

            if max_uses < 1 or max_uses > 1000:
                bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–æ–¥
            success = create_quiz_code(code, quiz_name, xp_reward, max_uses, str(user_id), expires_days=365)

            if success:
                bot.send_message(user_id,
                               f"‚úÖ –ö–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å–æ–∑–¥–∞–Ω!\n\n"
                               f"üî§ –ö–æ–¥: {code}\n"
                               f"üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {quiz_name}\n"
                               f"‚≠ê –û–ø—ã—Ç: {xp_reward}\n"
                               f"üé´ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}\n"
                               f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –≥–æ–¥\n\n"
                               f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞!")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–∞—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ XP –∏ –º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞")
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

        user_states[user_id] = None
        admin_broadcast_menu(message)


def show_quiz_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã"""
    user_id = str(message.from_user.id)

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–∞–º
        cursor.execute('''
            SELECT COUNT(*) as total_codes,
                   SUM(used_count) as total_uses,
                   AVG(used_count) as avg_uses,
                   COUNT(*) FILTER (WHERE is_active = TRUE) as active_codes
            FROM quiz_codes
        ''')
        code_stats = cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) as unique_users,
                   SUM(xp_earned) as total_xp_given
            FROM quiz_code_usage
        ''')
        user_stats = cursor.fetchone()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
        cursor.execute('''
            SELECT code, quiz_name, xp_reward, max_uses, used_count, expires_at
            FROM quiz_codes 
            WHERE is_active = TRUE
            ORDER BY created_at DESC
            LIMIT 10
        ''')
        active_codes = cursor.fetchall()

        conn.close()

        stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ö–¢–û–†–ò–ù\n\n"
        stats_text += f"üî§ –í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {code_stats[0]}\n"
        stats_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {code_stats[3]}\n"
        stats_text += f"üé´ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {code_stats[1]}\n"
        stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_stats[0]}\n"
        stats_text += f"üí´ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –æ–ø—ã—Ç–∞: {user_stats[1]}\n\n"

        if active_codes:
            stats_text += "üü¢ –ê–ö–¢–ò–í–ù–´–ï –ö–û–î–´:\n\n"
            for code, quiz_name, xp_reward, max_uses, used_count, expires_at in active_codes:
                stats_text += f"üî§ {code}\n"
                stats_text += f"   üìù {quiz_name}\n"
                stats_text += f"   ‚≠ê {xp_reward} XP | üé´ {used_count}/{max_uses}\n"

                if expires_at:
                    expires_date = datetime.fromisoformat(expires_at)
                    days_left = (expires_date - datetime.now()).days
                    stats_text += f"   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"

                stats_text += "\n"
        else:
            stats_text += "üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –Ω–µ—Ç\n"

        bot.send_message(user_id, stats_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω")

def handle_admin_broadcast_history(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = str(message.from_user.id)

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, message_text, sent_count, failed_count, status, created_at, sent_at
            FROM broadcasts 
            ORDER BY created_at DESC 
            LIMIT 10
        ''')

        broadcasts = cursor.fetchall()
        conn.close()

        if broadcasts:
            history_text = "üìã –ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö\n\n"

            for broadcast in broadcasts:
                broadcast_id, msg_text, sent_count, failed_count, status, created_at, sent_at = broadcast

                preview = msg_text[:30] + "..." if len(msg_text) > 30 else msg_text
                created_date = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')

                status_emoji = {
                    'draft': 'üìù',
                    'scheduled': '‚è∞',
                    'sending': 'üîÑ',
                    'sent': '‚úÖ',
                    'failed': '‚ùå'
                }.get(status, '‚ùì')

                history_text += f"{status_emoji} –†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id}\n"
                history_text += f"üìù {preview}\n"
                history_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

                if sent_count is not None:
                    history_text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                if failed_count is not None:
                    history_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"

                history_text += f"üïí –°–æ–∑–¥–∞–Ω–∞: {created_date}\n"

                if sent_at:
                    sent_date = datetime.fromisoformat(sent_at).strftime('%d.%m.%Y %H:%M')
                    history_text += f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {sent_date}\n"

                history_text += "\n"

        else:
            history_text = "üìã –ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö\n\n"
            history_text += "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.\n"

        bot.send_message(user_id, history_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫")


def start_lottery_creation(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    user_id = str(message.from_user.id)
    user_states[user_id] = 'creating_lottery'

    instruction = """üé™ –°–û–ó–î–ê–ù–ò–ï –õ–û–¢–ï–†–ï–ò

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:

1. –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (7 –¥–Ω–µ–π):
–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤

2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤|–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–¥–Ω–µ–π

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ –í–µ—Å–µ–Ω–Ω—è—è –ª–æ—Ç–µ—Ä–µ—è|–í—ã–∏–≥—Ä–∞–π –ø—Ä–∏–∑—ã!|10|100
‚Ä¢ –ë–æ–ª—å—à–∞—è –ª–æ—Ç–µ—Ä–µ—è|–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ 1000 –±–∞–ª–ª–æ–≤!|25|200|14

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –û—Ç–º–µ–Ω–∞'"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

    bot.send_message(user_id, instruction, reply_markup=markup)


def handle_admin_lottery_creation(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏ —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    user_id = str(message.from_user.id)

    if message.text in ["üîô –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üîô –í –º–µ–Ω—é"]:
        user_states[user_id] = None
        start(message)
        return

    if user_id in user_states and user_states[user_id] == 'creating_lottery':
        try:
            parts = message.text.split('|')
            if len(parts) == 4:
                name = parts[0].strip()
                description = parts[1].strip()
                ticket_price = int(parts[2].strip())
                max_tickets = int(parts[3].strip())
                duration_days = 7
            elif len(parts) == 5:
                name = parts[0].strip()
                description = parts[1].strip()
                ticket_price = int(parts[2].strip())
                max_tickets = int(parts[3].strip())
                duration_days = int(parts[4].strip())
            else:
                bot.send_message(user_id,
                                 "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                 "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤\n"
                                 "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤|–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–¥–Ω–µ–π")
                return

            if duration_days <= 0:
                duration_days = 7
            elif duration_days > 365:
                duration_days = 365

            lottery_id = create_lottery(name, description, ticket_price, max_tickets, duration_days)

            if lottery_id:
                bot.send_message(user_id,
                                 f"‚úÖ –õ–æ—Ç–µ—Ä–µ—è '{name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                 f"üÜî ID: {lottery_id}\n"
                                 f"‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π\n"
                                 f"üé´ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {ticket_price} –±–∞–ª–ª–æ–≤\n"
                                 f"üìä –ú–∞–∫—Å. –±–∏–ª–µ—Ç–æ–≤: {max_tickets}")
            else:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏")

        except ValueError as e:
            bot.send_message(user_id,
                             f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–∞—Ö: {e}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–µ–Ω–∞, –º–∞–∫—Å. –±–∏–ª–µ—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —á–∏—Å–ª–∞")
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

        user_states[user_id] = None
        admin_broadcast_menu(message)


def handle_admin_refresh_cache(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à Google —Ç–∞–±–ª–∏—Ü—ã"""
    user_id = str(message.from_user.id)

    try:
        bot.send_message(user_id, "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à Google —Ç–∞–±–ª–∏—Ü—ã...")
        load_google_sheets_data(force_refresh=True)
        bot.send_message(user_id, "‚úÖ –ö—ç—à Google —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")


def delete_all_lotteries():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT id, name FROM lotteries WHERE status = "active"')
        active_lotteries = cursor.fetchall()

        if not active_lotteries:
            conn.close()
            return "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"

        for lottery_id, lottery_name in active_lotteries:
            cursor.execute('DELETE FROM lottery_tickets WHERE lottery_id = ?', (lottery_id,))

        cursor.execute('DELETE FROM lotteries WHERE status = "active"')

        conn.commit()
        conn.close()

        lottery_names = [name for _, name in active_lotteries]
        return f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(active_lotteries)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: {', '.join(lottery_names)}"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–π: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–π: {e}"


def delete_finished_lotteries():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT id, name FROM lotteries WHERE status = "finished"')
        finished_lotteries = cursor.fetchall()

        if not finished_lotteries:
            conn.close()
            return "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"

        for lottery_id, lottery_name in finished_lotteries:
            cursor.execute('DELETE FROM lottery_tickets WHERE lottery_id = ?', (lottery_id,))

        cursor.execute('DELETE FROM lotteries WHERE status = "finished"')

        conn.commit()
        conn.close()

        lottery_names = [name for _, name in finished_lotteries]
        return f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(finished_lotteries)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: {', '.join(lottery_names)}"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: {e}"


def handle_admin_delete_active_lotteries(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π"""
    user_id = str(message.from_user.id)

    try:
        result = delete_all_lotteries()
        bot.send_message(user_id, result)
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    admin_broadcast_menu(message)


def handle_admin_delete_finished_lotteries(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π"""
    user_id = str(message.from_user.id)

    try:
        result = delete_finished_lotteries()
        bot.send_message(user_id, result)
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    admin_broadcast_menu(message)


def draw_lottery_manually(lottery_id):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ª–æ—Ç–µ—Ä–µ–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT name, status, tickets_sold FROM lotteries WHERE id = ?', (lottery_id,))
        lottery = cursor.fetchone()

        if not lottery:
            return False, "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        lottery_name, status, tickets_sold = lottery

        if status != 'active':
            return False, "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

        if tickets_sold == 0:
            return False, "–í –ª–æ—Ç–µ—Ä–µ–µ –Ω–µ—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"

        conn.close()

        success, winner, prize = draw_lottery_winner(lottery_id)

        if success:
            return True, f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ '{lottery_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}\nüí∞ –ü—Ä–∏–∑: {prize} –±–∞–ª–ª–æ–≤"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {winner}"

    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {e}"


def handle_admin_draw_lottery(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ª–æ—Ç–µ—Ä–µ–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    user_id = str(message.from_user.id)

    try:
        user_states[user_id] = None

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT id, name, tickets_sold FROM lotteries WHERE status = "active"')
        active_lotteries = cursor.fetchall()
        conn.close()

        if not active_lotteries:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            admin_broadcast_menu(message)
            return

        lotteries_with_tickets = [lottery for lottery in active_lotteries if lottery[2] > 0]

        if not lotteries_with_tickets:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π —Å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏")
            admin_broadcast_menu(message)
            return

        if len(lotteries_with_tickets) == 1:
            lottery_id = lotteries_with_tickets[0][0]
            lottery_name = lotteries_with_tickets[0][1]

            bot.send_message(user_id, f"üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ '{lottery_name}'...")

            success, result = draw_lottery_manually(lottery_id)
            bot.send_message(user_id, result)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for lottery_id, lottery_name, tickets_sold in lotteries_with_tickets:
                markup.add(types.KeyboardButton(f"üé∞ {lottery_name} (–±–∏–ª–µ—Ç–æ–≤: {tickets_sold})"))
            markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

            bot.send_message(user_id, "üé∞ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup=markup)
            user_states[user_id] = 'selecting_lottery_to_draw'

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_admin_draw_lottery: {e}")
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        admin_broadcast_menu(message)


def handle_lottery_selection_for_draw(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    user_id = str(message.from_user.id)

    if message.text in ["üîô –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üîô –í –º–µ–Ω—é"]:
        user_states[user_id] = None
        start(message)
        return

    try:
        lottery_name = message.text.replace("üé∞ ", "").split(" (–±–∏–ª–µ—Ç–æ–≤: ")[0]

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM lotteries WHERE name = ? AND status = "active"', (lottery_name,))
        result = cursor.fetchone()
        conn.close()

        if result:
            lottery_id = result[0]
            bot.send_message(user_id, f"üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ '{lottery_name}'...")

            success, result_msg = draw_lottery_manually(lottery_id)
            bot.send_message(user_id, result_msg)
        else:
            bot.send_message(user_id, "‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_lottery_selection_for_draw: {e}")
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–æ—Ç–µ—Ä–µ–∏: {e}")

    user_states[user_id] = None
    admin_broadcast_menu(message)


# ================== –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í ==================
def create_loan(user_id, amount):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        weekly_payment = amount // 12
        if amount % 12 != 0:
            weekly_payment += 1

        now = datetime.now()
        next_principal_date = now + timedelta(hours=168)
        next_interest_date = now + timedelta(hours=504)

        cursor.execute('''
            INSERT INTO loans 
            (user_id, amount, weekly_payment, next_principal_date, next_interest_date, status)
            VALUES (?, ?, ?, ?, ?, 'active')
        ''', (str(user_id), amount, weekly_payment,
              next_principal_date.isoformat(),
              next_interest_date.isoformat()))

        loan_id = cursor.lastrowid

        cursor.execute('SELECT credit_balance FROM users WHERE user_id = ?', (str(user_id),))
        result = cursor.fetchone()

        if result:
            current_credit = result[0]
            new_credit = current_credit + amount
            cursor.execute(
                'UPDATE users SET credit_balance = ?, updated_at = ? WHERE user_id = ?',
                (new_credit, now.isoformat(), str(user_id))
            )
        else:
            cursor.execute(
                'INSERT INTO users (user_id, balance, credit_balance, created_at, updated_at) VALUES (?, ?, ?, ?, ?)',
                (str(user_id), 0, amount, now.isoformat(), now.isoformat())
            )

        cursor.execute(
            'INSERT INTO transactions (user_id, amount, type, description, product_id) VALUES (?, ?, ?, ?, ?)',
            (str(user_id), amount, 'credit_issue', f"–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id}", f"loan_{loan_id}")
        )

        conn.commit()
        conn.close()

        add_xp(user_id, XP_REWARDS["loan_taken"], "loan_taken")

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫—Ä–µ–¥–∏—Ç #{loan_id} –¥–ª—è {user_id} –Ω–∞ {amount} –±–∞–ª–ª–æ–≤")
        return loan_id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}")
        return None


def get_active_loans(user_id=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        if user_id:
            cursor.execute('''
                SELECT id, user_id, amount, interest_rate, term_weeks, weekly_payment,
                       interest_payment_cycle_hours, next_principal_date, next_interest_date,
                       total_paid_principal, total_paid_interest, status, created_at
                FROM loans 
                WHERE user_id = ? AND status = 'active'
                ORDER BY created_at DESC
            ''', (str(user_id),))
        else:
            cursor.execute('''
                SELECT id, user_id, amount, interest_rate, term_weeks, weekly_payment,
                       interest_payment_cycle_hours, next_principal_date, next_interest_date,
                       total_paid_principal, total_paid_interest, status, created_at
                FROM loans WHERE status = 'active'
                ORDER BY created_at DESC
            ''')

        loans = cursor.fetchall()
        conn.close()

        return loans

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        return []


def send_loan_payment_notification(user_id, loan_id, amount, payment_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"""
    try:
        if payment_type == "principal":
            title = "üí∏ –°–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"
            message = f"–°–ø–∏—Å–∞–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {amount} –±–∞–ª–ª–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}"
        else:
            title = "üìà –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"
            message = f"–°–ø–∏—Å–∞–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã {amount} –±–∞–ª–ª–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}"

        send_user_notification(user_id, "loan_payment", title, message, f"loan_{loan_id}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
        return False


def get_loan_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, amount, weekly_payment, next_principal_date, next_interest_date, 
                   total_paid_principal, total_paid_interest, status
            FROM loans 
            WHERE user_id = ? AND status = 'active'
            ORDER BY created_at DESC
        ''', (str(user_id),))

        loans = cursor.fetchall()
        conn.close()

        if not loans:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤."

        info_text = "üè¶ –í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –ö–†–ï–î–ò–¢–´\n\n"

        for loan in loans:
            if len(loan) >= 8:
                loan_id = loan[0]
                amount = loan[1]
                weekly_payment = loan[2]
                next_principal = loan[3]
                next_interest = loan[4]
                total_principal = loan[5]
                total_interest = loan[6]
                status = loan[7]

                remaining_debt = amount - (total_principal or 0)

                next_principal_str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if next_principal:
                    try:
                        next_principal_date = datetime.fromisoformat(next_principal)
                        next_principal_str = next_principal_date.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass

                next_interest_str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if next_interest:
                    try:
                        next_interest_date = datetime.fromisoformat(next_interest)
                        next_interest_str = next_interest_date.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass

                info_text += f"üìã –ö—Ä–µ–¥–∏—Ç #{loan_id}\n"
                info_text += f"üí≥ –°—É–º–º–∞: {amount} –±–∞–ª–ª–æ–≤\n"
                info_text += f"üìâ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {remaining_debt} –±–∞–ª–ª–æ–≤\n"
                info_text += f"üí∏ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {weekly_payment} –±–∞–ª–ª–æ–≤\n"
                info_text += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {next_principal_str}\n"
                info_text += f"‚è∞ –°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {next_interest_str}\n"
                info_text += f"üí∞ –£–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {total_principal or 0} –±–∞–ª–ª–æ–≤\n\n"
            else:
                print(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞: {loan}")

        return info_text

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö."


def process_loan_payments():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ overdue –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º"""
    try:
        now = datetime.now()
        active_loans = get_active_loans()

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ {len(active_loans)} –∞–∫—Ç–∏–≤–Ω—ã–º –∫—Ä–µ–¥–∏—Ç–∞–º...")

        for loan in active_loans:
            if len(loan) >= 13:
                loan_id = loan[0]
                user_id = loan[1]
                amount = loan[2]
                interest_rate = loan[3]
                term_weeks = loan[4]
                weekly_payment = loan[5]
                interest_cycle = loan[6]
                next_principal = loan[7]
                next_interest = loan[8]
                total_principal = loan[9]
                total_interest = loan[10]
                status = loan[11]
                created_at = loan[12]

                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id} –¥–ª—è {user_id}")

                next_principal_date = datetime.fromisoformat(next_principal) if next_principal else None
                next_interest_date = datetime.fromisoformat(next_interest) if next_interest else None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É
                if next_principal_date and next_principal_date <= now:
                    print(f"üí∏ –ù–∞–π–¥–µ–Ω overdue –ø–ª–∞—Ç–µ–∂ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id}")
                    process_principal_payment(loan_id, user_id, weekly_payment, next_principal_date)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
                if next_interest_date and next_interest_date <= now:
                    print(f"üìà –ù–∞–π–¥–µ–Ω overdue –ø–ª–∞—Ç–µ–∂ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id}")
                    process_interest_payment(loan_id, user_id, amount, interest_rate, next_interest_date)
            else:
                print(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞: {loan}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º: {e}")


def process_principal_payment(loan_id, user_id, weekly_payment, next_principal_date):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT balance, credit_balance FROM users WHERE user_id = ?', (str(user_id),))
        user_data = cursor.fetchone()

        if not user_data:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return False

        balance, credit_balance = user_data

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –ø–æ—Ç–æ–º —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö
        amount_to_deduct = weekly_payment
        description = f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}"

        success = False

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        if balance >= amount_to_deduct:
            new_balance = balance - amount_to_deduct
            cursor.execute(
                'UPDATE users SET balance = ?, updated_at = ? WHERE user_id = ?',
                (new_balance, datetime.now().isoformat(), str(user_id))
            )
            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                (str(user_id), -amount_to_deduct, 'loan_payment', description)
            )
            success = True
            print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount_to_deduct} –±–∞–ª–ª–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö
        elif credit_balance >= amount_to_deduct:
            new_credit_balance = credit_balance - amount_to_deduct
            cursor.execute(
                'UPDATE users SET credit_balance = ?, updated_at = ? WHERE user_id = ?',
                (new_credit_balance, datetime.now().isoformat(), str(user_id))
            )
            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                (str(user_id), -amount_to_deduct, 'loan_payment', description)
            )
            success = True
            print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount_to_deduct} –±–∞–ª–ª–æ–≤ —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞—á–∏—Å–ª—è–µ–º —à—Ç—Ä–∞—Ñ
            penalty = weekly_payment * 0.1  # 10% —à—Ç—Ä–∞—Ñ
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}. –®—Ç—Ä–∞—Ñ: {penalty}")

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            cursor.execute('''
                UPDATE loans 
                SET total_paid_principal = COALESCE(total_paid_principal, 0) + ?,
                    next_principal_date = ?
                WHERE id = ?
            ''', (amount_to_deduct,
                  (next_principal_date + timedelta(hours=168)).isoformat(),  # +7 –¥–Ω–µ–π
                  loan_id))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –ø–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç
            cursor.execute('SELECT amount, total_paid_principal FROM loans WHERE id = ?', (loan_id,))
            loan_data = cursor.fetchone()
            if loan_data:
                total_amount, total_paid = loan_data
                if total_paid >= total_amount:
                    cursor.execute('UPDATE loans SET status = "paid" WHERE id = ?', (loan_id,))
                    print(f"üéâ –ö—Ä–µ–¥–∏—Ç #{loan_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!")

                    # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
                    add_xp(user_id, XP_REWARDS["loan_repaid"], "loan_repaid")

                    send_user_notification(
                        user_id,
                        "loan_paid",
                        "üéâ –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω!",
                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç #{loan_id}",
                        f"loan_{loan_id}"
                    )

        conn.commit()
        conn.close()
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É: {e}")
        return False


def process_interest_payment(loan_id, user_id, amount, interest_rate, next_interest_date):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        interest_amount = int(amount * (interest_rate / 100))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT balance, credit_balance FROM users WHERE user_id = ?', (str(user_id),))
        user_data = cursor.fetchone()

        if not user_data:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return False

        balance, credit_balance = user_data

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        description = f"–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}"
        success = False

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        if balance >= interest_amount:
            new_balance = balance - interest_amount
            cursor.execute(
                'UPDATE users SET balance = ?, updated_at = ? WHERE user_id = ?',
                (new_balance, datetime.now().isoformat(), str(user_id))
            )
            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                (str(user_id), -interest_amount, 'loan_interest', description)
            )
            success = True
            print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {interest_amount} –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö
        elif credit_balance >= interest_amount:
            new_credit_balance = credit_balance - interest_amount
            cursor.execute(
                'UPDATE users SET credit_balance = ?, updated_at = ? WHERE user_id = ?',
                (new_credit_balance, datetime.now().isoformat(), str(user_id))
            )
            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                (str(user_id), -interest_amount, 'loan_interest', description)
            )
            success = True
            print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {interest_amount} –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞—á–∏—Å–ª—è–µ–º —à—Ç—Ä–∞—Ñ
            penalty = interest_amount * 0.1  # 10% —à—Ç—Ä–∞—Ñ
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}. –®—Ç—Ä–∞—Ñ: {penalty}")

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            cursor.execute('''
                UPDATE loans 
                SET total_paid_interest = COALESCE(total_paid_interest, 0) + ?,
                    next_interest_date = ?
                WHERE id = ?
            ''', (interest_amount,
                  (next_interest_date + timedelta(hours=504)).isoformat(),  # +21 –¥–µ–Ω—å
                  loan_id))

        conn.commit()
        conn.close()
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º: {e}")
        return False


def start_loan_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""

    def scheduler():
        while True:
            try:
                print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º...")
                process_loan_payments()
                time.sleep(3600)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
                time.sleep(300)

    scheduler_thread = threading.Thread(target=scheduler, daemon=True)
    scheduler_thread.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∑–∞–ø—É—â–µ–Ω")


start_loan_scheduler()


# ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_users(users_dict):
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_dict, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def send_suggestion_to_channel(user_info, suggestion_text):
    try:
        message_text = f"üí° –ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï\n\nüë§ –û—Ç: {user_info['first_name']}\nüÜî ID: {user_info['user_id']}\n"
        if user_info.get('username'):
            message_text += f"üì± Username: @{user_info['username']}\n"
        message_text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nüìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n{suggestion_text}"

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False


def send_purchase_notification(user_id, product, user, amount_from_balance, amount_from_credit, new_balance,
                               new_credit):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        payment_parts = []
        if amount_from_balance > 0:
            payment_parts.append(f"{amount_from_balance} –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤")
        if amount_from_credit > 0:
            payment_parts.append(f"{amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")

        payment_description = " + ".join(payment_parts)

        message_text = f"""üõí –ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê –í –ú–ê–ì–ê–ó–ò–ù–ï

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî ID: {user_id}
üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéÅ –¢–æ–≤–∞—Ä: {product['name']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product['price']} –±–∞–ª–ª–æ–≤
üí∏ –°–ø–∏—Å–∞–Ω–∏–µ: {payment_description}

üìä –ù–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã: {new_balance}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {new_credit}
‚Ä¢ –í—Å–µ–≥–æ: {new_balance + new_credit} –±–∞–ª–ª–æ–≤

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ –ë–∞–ª–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω—ã
‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        bot.send_message(SUGGESTIONS_CHANNEL, message_text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
        return False


# ================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ==================
print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
users = load_users()
print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


# ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_id not in users:
        users[user_id] = {
            'first_name': first_name,
            'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
            'is_new': True,
            'visit_count': 1,
            'registered_at': datetime.now().isoformat()
        }
    else:
        users[user_id]['visit_count'] += 1
        users[user_id]['is_new'] = False

    save_users(users)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "‚≠ê –û—Ç–∑—ã–≤—ã", "üìã –ü—Ä–∞–≤–∏–ª–∞", "‚ö° –®—Ç—Ä–∞—Ñ—ã", "üõí –ü–æ–∫—É–ø–∫–∏",
        "üìã –°–ø–∏—Å–æ–∫ ID", "üí∞ –ö—Ä–µ–¥–∏—Ç", "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã", "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
        "üé™ –õ–æ—Ç–µ—Ä–µ—è", "üèÜ –£—Ä–æ–≤–Ω–∏"
    ]

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞–º
    if is_admin(message.from_user.id):
        buttons.append("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    for btn_text in buttons:
        markup.add(types.KeyboardButton(btn_text))

    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–æFuck'–∞! üöÄ

üí° –ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Google –¢–∞–±–ª–∏—Ü–µ–π.
üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –±–æ—Ç–µ.

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""

    bot.send_message(user_id, welcome_text, reply_markup=markup)


def show_profile(message):
    user_id = str(message.from_user.id)

    try:
        current_balance = get_user_balance(user_id)
        credit_balance = get_user_credit_balance(user_id)
        total_available = current_balance + credit_balance

        transactions = get_user_transactions(user_id, 5)

        level_info = get_user_level_info(user_id)

        profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        profile_text += f"üÜî ID: {user_id}\n"
        profile_text += f"üë§ –ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        profile_text += f"üì± Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"

        if level_info:
            profile_text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {level_info['level']} ({level_info['level_name']})\n"
            profile_text += f"‚≠ê –û–ø—ã—Ç: {level_info['xp']}/{level_info['xp_required']}\n"

        profile_text += f"\nüíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:\n"
        profile_text += f"   üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã: {current_balance}\n"
        profile_text += f"   üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit_balance}\n"
        profile_text += f"   üí≥ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available} –±–∞–ª–ª–æ–≤\n"

        bonus_info = get_daily_bonus_info(user_id)
        if bonus_info and bonus_info['last_claim_date']:
            last_claim = datetime.fromisoformat(bonus_info['last_claim_date'])
            today = datetime.now().date()

            if last_claim.date() == today:
                profile_text += f"\nüéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è! üéâ\n"
            else:
                profile_text += f"\nüéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é! üéÅ\n"

            profile_text += f"   üìÖ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {bonus_info['streak_count']} –¥–Ω–µ–π\n"
            profile_text += f"   üí∞ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: {bonus_info['total_bonus_received']} –±–∞–ª–ª–æ–≤\n"
        else:
            profile_text += f"\nüéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª\n"

        users_data = load_google_sheets_data()
        user_data = users_data.get(user_id, {})

        if user_data:
            count_3_4 = user_data.get('count_3_4', 0)
            penalty_applied = user_data.get('penalty_applied', 0)

            profile_text += f"\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î: {count_3_4}\n"
            if penalty_applied > 0:
                profile_text += f"üö´ –®—Ç—Ä–∞—Ñ–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {penalty_applied}\n"

        if transactions:
            profile_text += "\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
            for amount, t_type, description, date in transactions:
                sign = "‚ûï" if amount > 0 else "‚ûñ"
                if isinstance(date, datetime):
                    date_str = date.strftime('%d.%m')
                elif isinstance(date, str):
                    try:
                        date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                        date_str = date_obj.strftime('%d.%m')
                    except:
                        date_str = date[:5]
                else:
                    date_str = str(date)[:5]

                profile_text += f"{sign} {abs(amount)} - {description} ({date_str})\n"
        else:
            profile_text += "\nüìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞\n"

        bot.send_message(user_id, profile_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")


@bot.message_handler(content_types=['text'])
def handle_messages(message):
    user_id = str(message.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if message.text in ["üîô –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üîô –í –º–µ–Ω—é", "–û—Ç–º–µ–Ω–∞"]:
        user_states[user_id] = None
        start(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        current_state = user_states[user_id]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if current_state == 'waiting_suggestion':
            handle_suggestion(message)
            return
        elif current_state == 'waiting_password':
            handle_password(message)
            return
        elif current_state == 'waiting_credit_amount':
            handle_credit_amount(message)
            return
        elif current_state == 'shopping':
            handle_shop_selection(message)
            return
        elif current_state == 'creating_lottery':
            handle_admin_lottery_creation(message)
            return
        elif current_state == 'creating_broadcast':
            handle_admin_broadcast_creation(message)
            return
        elif current_state == 'selecting_lottery_to_draw':
            handle_lottery_selection_for_draw(message)
            return
        elif current_state == 'creating_quiz_code':  # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
            handle_quiz_code_creation(message)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    handlers = {
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å": show_profile,
        "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π": show_history,
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": show_suggestions_menu,
        "‚≠ê –û—Ç–∑—ã–≤—ã": show_reviews,
        "üìã –ü—Ä–∞–≤–∏–ª–∞": show_rules,
        "‚ö° –®—Ç—Ä–∞—Ñ—ã": show_penalties,
        "üõí –ü–æ–∫—É–ø–∫–∏": lambda msg: enter_shop(msg),
        "üìã –°–ø–∏—Å–æ–∫ ID": show_password_prompt,
        "üí∞ –ö—Ä–µ–¥–∏—Ç": show_credit_menu,
        "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã": show_quizzes_menu,
        "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å": handle_daily_bonus,
        "üé™ –õ–æ—Ç–µ—Ä–µ—è": show_lottery_menu,
        "üèÜ –£—Ä–æ–≤–Ω–∏": show_levels_menu,
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å": admin_broadcast_menu,
        "üìä –ú–æ–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã": show_my_quizzes,
        "üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É": lambda msg: start_broadcast_creation(msg),
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫": handle_admin_broadcast_stats,
        "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫": handle_admin_broadcast_history,
        "üé™ –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é": lambda msg: start_lottery_creation(msg),
        "üî§ –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã": lambda msg: start_quiz_code_creation(msg),  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω": lambda msg: show_quiz_stats(msg),  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏": handle_admin_delete_active_lotteries,
        "üßπ –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏": handle_admin_delete_finished_lotteries,
        "üé∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à": handle_admin_draw_lottery,
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à Google": handle_admin_refresh_cache,
    }

    if message.text in handlers:
        handlers[message.text](message)
    elif message.text in ["üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", "üìä –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã"]:
        show_credit_menu(message)
    elif message.text.startswith("üé∞ ") and " (–±–∏–ª–µ—Ç–æ–≤: " in message.text:
        handle_lottery_selection_for_draw(message)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω
        handle_quiz_code(message)


def show_history(message):
    user_id = str(message.from_user.id)

    try:
        bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Google Sheets...")
        history = get_user_history(user_id)

        current_balance = get_user_balance(user_id)
        credit_balance = get_user_credit_balance(user_id)
        total_available = current_balance + credit_balance

        if history:
            history_text = f"üìä –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
            history_text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(history)}\n"
            history_text += f"–û–±—â–∏–π –±–∞–ª–ª: {total_available}\n\n"

            for i, record in enumerate(history, 1):
                task = record.get('task', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
                score = record.get('score', 0)
                description = record.get('description', '')
                original_value = record.get('original_value', '')

                if score > 0:
                    emoji = "üü¢"
                elif score < 0:
                    emoji = "üî¥"
                else:
                    emoji = "‚ö™"

                history_text += f"{i}. {emoji} {task}\n"
                history_text += f"   ‚≠ê –ë–∞–ª–ª—ã: {score:+.0f}\n"

                if description:
                    history_text += f"   üìù {description}\n"

                history_text += "\n"

        else:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n\n"
            history_text += "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            history_text += f"üÜî –í–∞—à ID: {user_id}\n"
            history_text += f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {total_available} –±–∞–ª–ª–æ–≤\n"
            history_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –°–ø–∏—Å–æ–∫ ID' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID"

        if len(history_text) > 4000:
            parts = [history_text[i:i + 4000] for i in range(0, len(history_text), 4000)]
            for part in parts:
                bot.send_message(user_id, part)
                time.sleep(0.5)
        else:
            bot.send_message(user_id, history_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_history: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_user_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    users_data = load_google_sheets_data()
    user_id_str = str(user_id)

    history = []

    if user_id_str in users_data:
        user_data = users_data[user_id_str]

        for task_name, score_info in user_data['scores'].items():
            if task_name == 'penalty_info':
                history.append({
                    'task': '–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î',
                    'score': score_info['points'],
                    'date': '2024-2025',
                    'description': score_info.get('description', '–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î'),
                    'source': 'google'
                })
            elif isinstance(score_info, dict) and 'points' in score_info:
                history.append({
                    'task': task_name,
                    'score': score_info['points'],
                    'date': '2024-2025',
                    'description': score_info.get('description', ''),
                    'original_value': score_info.get('value', ''),
                    'source': 'google'
                })

    transactions = get_user_transactions(user_id, 100)

    for amount, t_type, description, date in transactions:
        if t_type == 'initial':
            continue

        if t_type == 'purchase':
            task_name = f"üõí –ü–æ–∫—É–ø–∫–∞: {description}"
        elif t_type == 'credit_operation':
            if amount < 0:
                task_name = f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {description}"
            else:
                task_name = f"üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {description}"
        elif 'credit' in t_type:
            task_name = f"üè¶ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {description}"
        else:
            task_name = f"üìä –û–ø–µ—Ä–∞—Ü–∏—è: {description}"

        if isinstance(date, datetime):
            date_str = date.strftime('%d.%m.%Y')
        elif isinstance(date, str):
            try:
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                date_str = date_obj.strftime('%d.%m.%Y')
            except:
                date_str = date
        else:
            date_str = str(date)

        history.append({
            'task': task_name,
            'score': amount,
            'date': date_str,
            'description': '',
            'source': 'local_db'
        })

    history.sort(key=lambda x: x['date'] if x['source'] == 'local_db' else '2024-2025', reverse=True)
    return history


def show_suggestions_menu(message):
    user_id = str(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    user_states[user_id] = 'waiting_suggestion'
    bot.send_message(user_id, "üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)


def handle_suggestion(message):
    user_id = str(message.from_user.id)
    suggestion_text = message.text

    if suggestion_text in ["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"]:
        user_states[user_id] = None
        start(message)
        return

    if len(suggestion_text.strip()) < 10:
        bot.send_message(user_id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        return

    user_info = {
        'user_id': user_id,
        'first_name': message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        'username': message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }

    if send_suggestion_to_channel(user_info, suggestion_text):
        add_xp(user_id, XP_REWARDS["suggestion"], "suggestion")

        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    user_states[user_id] = None
    start(message)


def show_password_prompt(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = 'waiting_password'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É ID –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=markup)


def handle_password(message):
    user_id = str(message.from_user.id)
    password_attempt = message.text

    if password_attempt in ["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"]:
        user_states[user_id] = None
        start(message)
        return

    if password_attempt == PASSWORD:
        user_states[user_id] = None
        show_available_ids(message)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


def show_available_ids(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ ID –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏"""
    user_id = str(message.from_user.id)

    bot.send_message(user_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")

    users_data = load_google_sheets_data()

    if users_data:
        ids_text = "üìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö ID –í –¢–ê–ë–õ–ò–¶–ï:\n\n"

        sorted_users = sorted(users_data.items(), key=lambda x: int(x[0]) if x[0].isdigit() else 0)

        for i, (uid, data) in enumerate(sorted_users, 1):
            name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            try:
                user_id_num = int(uid)
                current_balance = get_user_balance(user_id_num)
                credit_balance = get_user_credit_balance(user_id_num)
                total_available = current_balance + credit_balance
            except (ValueError, TypeError):
                total_available = data.get('total_score', 0)
                current_balance = total_available
                credit_balance = 0

            count_3_4 = data.get('count_3_4', 0)
            penalty_applied = data.get('penalty_applied', 0)

            ids_text += f"{i}. üÜî {uid} - {name}\n"
            ids_text += f"   üí∞ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_available}\n"
            ids_text += f"   ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –î–î: {count_3_4}\n"
            if penalty_applied > 0:
                ids_text += f"   üö´ –®—Ç—Ä–∞—Ñ–æ–≤: {penalty_applied}\n"
            ids_text += "\n"

        ids_text += f"üîç –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
        ids_text += f"üë§ –í–∞—à ID: {user_id}\n"
        user_current_balance = get_user_balance(int(user_id))
        user_credit_balance = get_user_credit_balance(int(user_id))
        user_total = user_current_balance + user_credit_balance
        ids_text += f"üí≥ –í–∞—à–∏ –±–∞–ª–ª—ã: {user_total} (–æ—Å–Ω–æ–≤–Ω—ã–µ: {user_current_balance} + –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ: {user_credit_balance})"

    else:
        ids_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"

    if len(ids_text) > 4000:
        parts = []
        current_part = ""
        lines = ids_text.split('\n')

        for line in lines:
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'

        if current_part:
            parts.append(current_part)

        for part in parts:
            bot.send_message(user_id, part)
            time.sleep(0.5)
    else:
        bot.send_message(user_id, ids_text)

    start(message)


def show_reviews(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/noofuck_feedback")
    markup.add(btn)
    bot.send_message(user_id, "‚≠ê –û—Ç–∑—ã–≤—ã\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:", reply_markup=markup)


def show_rules(message):
    rules_text = "üìã –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n\n üöÄ  –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ \n\n –ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ê–∫—Ç–∏–≤–Ω–∏—á–∞–π, —É—á–∏—Å—å –∏ –ø–æ–ª—É—á–∞–π –∑–∞ —ç—Ç–æ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã!\n\n --- ‚ú® ---\n\n üìö –£—á–µ–±–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n\n‚Üí –ü—Ä–∏—Å–ª–∞–ª(–∞) –î–ó –≤ –¥–µ–¥–ª–∞–π–Ω ‚Üí  + 10 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –°–¥–∞–ª(–∞) –î–ó –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ ‚Üí + 5 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–æ–±–Ω–∏–∫ —Å–¥–∞–Ω –≤ —Å—Ä–æ–∫ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–æ–±–Ω–∏–∫ —Å–¥–∞–Ω –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ ‚Üí + 8 –±–∞–ª–ª–æ–≤ \n\n üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å \n\n ‚Üí –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª(–∞) –∑–∞—á—ë—Ç ‚Üí + 20 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü—Ä–∏—à—ë–ª(—à–ª–∞) –Ω–∞ —Å—Ö–æ–¥–∫—É ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ–±–µ–¥–∏–ª(–∞) –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –£—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ‚Üí + 8 –±–∞–ª–ª–æ–≤ \n\n üíé –§–∏—Ä–º–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –ù–∏–∫–∏—Ç—ã \n\n ‚Üí –†–µ—à–∏–ª(–∞) –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí + 30 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ—Å–µ—Ç–∏–ª(–∞) –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –Ω–∞ –¥–æ–ø. –≤–µ–±–∏–Ω–∞—Ä–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ü™Ö –§–∏—Ä–º–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –ì–µ–ª–∏ \n\n ‚Üí –†–µ—à–∏–ª(–∞) –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí + 30 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –ü–æ—Å–µ—Ç–∏–ª(–∞) –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –Ω–∞ –¥–æ–ø. –≤–µ–±–∏–Ω–∞—Ä–µ ‚Üí + 15 –±–∞–ª–ª–æ–≤ \n\n ‚Üí –†–µ—à–∏–ª(–∞) –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–Ω–æ ‚Üí + 5 –±–∞–ª–ª–æ–≤ \n\n –†–µ—à–∏–ª(–∞) –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–≤–µ—Ä–Ω–æ ‚Üí + 3 –±–∞–ª–ª–∞ \n\n üöÄ –ö—Ä—É–ø–Ω—ã–µ –ø–æ–±–µ–¥—ã \n\n ‚Üí –£—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª(–∞) —Ä—É–±–µ–∂–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ‚Üí  + 25 –±–∞–ª–ª–æ–≤ \n\n --- ‚ú® --- \n\n –£—á–∞—Å—Ç–≤—É–π, –¥–µ–π—Å—Ç–≤—É–π –∏ –ø–æ–∫–æ—Ä—è–π –Ω–æ–≤—ã–µ –≤—ã—Å–æ—Ç—ã! üí™"
    bot.send_message(message.from_user.id, rules_text)


def show_penalties(message):
    penalties_text = """‚ö° –®—Ç—Ä–∞—Ñ—ã

üî¥ –ù–ê–†–£–®–ï–ù–ò–Ø –ò –®–¢–†–ê–§–´ 

*–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ üöÄ –Ω–æ–æFuck'–∞*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã –ö–ê–¢–ï–ì–û–†–ò–ò –®–¢–†–ê–§–û–í:

‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –î–î:
   ‚Ä¢ –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ‚Üí 0 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ö–∞–∂–¥–∞—è –ø–æ—Å–ª–µ–¥—É—é—â–∞—è ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤

üö´ –°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:
   ‚Ä¢ –ù–µ—Å–¥–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ—Å–¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—Ä–æ–±–Ω–∏–∫ ‚Üí üî¥ -30 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ ‚Üí üî¥ -15 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –î–ó –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Üí üî¥ -10 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Üí üî¥ -15 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –õ–° –∑–∞ 24 —á–∞—Å–∞ ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –î–ó –±–æ–ª–µ–µ –¥–≤—É—Ö —Ä–∞–∑ ‚Üí üî¥ -20 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ ‚Üí üî¥ -10 –±–∞–ª–ª–æ–≤
   ‚Ä¢ –ù–µ —Å–¥–∞–Ω–∞ —Ä—É–±–µ–∂–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ‚Üí üî¥ -25 –±–∞–ª–ª–æ–≤

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° –ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:

‚úÖ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —à—Ç—Ä–∞—Ñ–æ–≤?
   ‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –î–ó
   ‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
   ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö

üìä –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é?
   ‚Ä¢ –†–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π"
   ‚Ä¢ –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å"""
    bot.send_message(message.from_user.id, penalties_text)


def show_credit_menu(message):
    """–ú–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–∞"""
    user_id = str(message.from_user.id)

    if message.text == "üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç":
        user_states[user_id] = 'waiting_credit_amount'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(user_id, "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 250 –±–∞–ª–ª–æ–≤):", reply_markup=markup)
        return

    if message.text == "üìä –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã":
        loan_info = get_loan_info(user_id)
        bot.send_message(user_id, loan_info)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = None
        start(message)
        return

    credit_info = """üí∞ –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í üí∞

–£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞:
‚Ä¢ üè¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 250 –±–∞–ª–ª–æ–≤
‚Ä¢ üìà –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 14% –∫–∞–∂–¥—ã–µ 504 —á–∞—Å–∞ (21 –¥–µ–Ω—å)
‚Ä¢ üí∏ –ü–ª–∞—Ç–µ–∂: 1/12 –æ—Ç —Å—É–º–º—ã –∫–∞–∂–¥—ã–µ 168 —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)
‚Ä¢ ‚è±Ô∏è –ü–æ–ª–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ: 12 –Ω–µ–¥–µ–ª—å

–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:
–ö—Ä–µ–¥–∏—Ç 120 –±–∞–ª–ª–æ–≤:
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: 10 –±–∞–ª–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞–∂–¥—ã–µ 3 –Ω–µ–¥–µ–ª–∏: 16.8 –±–∞–ª–ª–æ–≤

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ö—Ä–µ–¥–∏—Ç —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìù –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç"))
    markup.add(types.KeyboardButton("üìä –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã"))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, credit_info, reply_markup=markup)


def handle_credit_amount(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    user_id = str(message.from_user.id)

    if message.text in ["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"]:
        user_states[user_id] = None
        show_credit_menu(message)
        return

    try:
        amount = int(message.text)

        if amount <= 0:
            bot.send_message(user_id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        if amount > 250:
            bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ - 250 –±–∞–ª–ª–æ–≤!")
            return

        processing_msg = bot.send_message(user_id, "‚è≥ –°–æ–∑–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç...")

        balance_before = get_user_balance(user_id)
        credit_before = get_user_credit_balance(user_id)

        loan_id = create_loan(user_id, amount)

        balance_after = get_user_balance(user_id)
        credit_after = get_user_credit_balance(user_id)

        bot.delete_message(user_id, processing_msg.message_id)

        if loan_id:
            user_states[user_id] = None
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üîô –í –º–µ–Ω—é"))

            loan_info = f"""‚úÖ –ö–†–ï–î–ò–¢ –û–î–û–ë–†–ï–ù!

üìã –î–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞:
‚Ä¢ üí≥ –°—É–º–º–∞: {amount} –±–∞–ª–ª–æ–≤
‚Ä¢ üÜî –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}
‚Ä¢ üí∏ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {amount // 12} –±–∞–ª–ª–æ–≤
‚Ä¢ üìà –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 14% –∫–∞–∂–¥—ã–µ 21 –¥–µ–Ω—å
‚Ä¢ ‚è±Ô∏è –°—Ä–æ–∫: 12 –Ω–µ–¥–µ–ª—å

üí∞ –ë–∞–ª–∞–Ω—Å—ã:
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã: {balance_before} ‚Üí {balance_after}
   ‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit_before} ‚Üí {credit_after}

‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç!

‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""

            bot.send_message(user_id, loan_info, reply_markup=markup)
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except ValueError:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
        print(f"Credit error: {e}")


# ================== –°–ò–°–¢–ï–ú–ê –ú–ê–ì–ê–ó–ò–ù–ê ==================
def enter_shop(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = 'shopping'
    show_purchases(message)


def show_purchases(message):
    user_id = str(message.from_user.id)
    balance = get_user_balance(user_id)
    credit_balance = get_user_credit_balance(user_id)
    total_available = balance + credit_balance

    shop_text = f"""üõí –ú–ê–ì–ê–ó–ò–ù –ë–ê–õ–õ–û–í

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏!

üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:
üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã: {balance}
üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit_balance}
üí≥ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available} –±–∞–ª–ª–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    categories = set(product["category"] for product in PRODUCTS.values())
    for category in categories:
        markup.add(types.KeyboardButton(category))

    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, shop_text, reply_markup=markup)


def handle_shop_selection(message):
    user_id = str(message.from_user.id)

    if message.text in ["üîô –ù–∞–∑–∞–¥", "üîô –û—Ç–º–µ–Ω–∞"]:
        user_states[user_id] = None
        start(message)
        return

    categories = set(product["category"] for product in PRODUCTS.values())
    if message.text in categories:
        show_products_in_category(message, message.text)
        return

    for product_id, product in PRODUCTS.items():
        if message.text == product["name"]:
            show_product_details(message, product_id)
            return

    if message.text.startswith("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"):
        product_id = message.text.replace("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ", "")
        process_payment(message, product_id)
        return

    show_purchases(message)


def show_products_in_category(message, category):
    user_id = str(message.from_user.id)

    category_products = {pid: prod for pid, prod in PRODUCTS.items() if prod["category"] == category}

    products_text = f"{category}\n\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    for product_id, product in category_products.items():
        products_text += f"{product['name']} - {product['price']} –±–∞–ª–ª–æ–≤\n"
        markup.add(types.KeyboardButton(product['name']))

    markup.add(types.KeyboardButton("üîô –í –º–∞–≥–∞–∑–∏–Ω"))

    bot.send_message(user_id, products_text, reply_markup=markup)


def show_product_details(message, product_id):
    user_id = str(message.from_user.id)
    product = PRODUCTS[product_id]
    balance = get_user_balance(user_id)
    credit_balance = get_user_credit_balance(user_id)
    total_available = balance + credit_balance

    product_text = f"""üéÅ {product['name']}

{product['description']}

üí∞ –¶–µ–Ω–∞: {product['price']} –±–∞–ª–ª–æ–≤

üíº –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã: {balance}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {credit_balance}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available}"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if total_available >= product['price']:
        amount_from_balance = min(balance, product['price'])
        amount_from_credit = product['price'] - amount_from_balance

        product_text += f"\n\n‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
        product_text += f"\nüí∏ –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ:"

        if amount_from_balance > 0:
            product_text += f"\n   ‚Ä¢ {amount_from_balance} –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤"
        if amount_from_credit > 0:
            product_text += f"\n   ‚Ä¢ {amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"

        markup.add(types.KeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {product_id}"))
    else:
        product_text += f"\n\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {product['price'] - total_available} –±–∞–ª–ª–æ–≤"

    markup.add(types.KeyboardButton("üîô –í –º–∞–≥–∞–∑–∏–Ω"))

    bot.send_message(user_id, product_text, reply_markup=markup)


def process_payment(message, product_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ —Ç–æ–≤–∞—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é"""
    user_id = str(message.from_user.id)
    product = PRODUCTS[product_id]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    balance = get_user_balance(user_id)
    credit_balance = get_user_credit_balance(user_id)
    total_available = balance + credit_balance

    if total_available < product['price']:
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
        show_purchases(message)
        return

    processing_msg = bot.send_message(user_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂...")

    amount_from_balance = min(balance, product['price'])
    amount_from_credit = product['price'] - amount_from_balance

    success = True
    description_parts = []

    # –°–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    if amount_from_balance > 0:
        success_balance = update_user_balance(
            user_id,
            -amount_from_balance,
            f"–ü–æ–∫—É–ø–∫–∞: {product['name']}",
            product_id
        )
        success = success and success_balance
        description_parts.append(f"{amount_from_balance} –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤")

    # –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    if amount_from_credit > 0:
        success_credit = update_user_credit_balance(
            user_id,
            -amount_from_credit,
            f"–ü–æ–∫—É–ø–∫–∞: {product['name']}"
        )
        success = success and success_credit
        description_parts.append(f"{amount_from_credit} –∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")

    bot.delete_message(user_id, processing_msg.message_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        new_balance = get_user_balance(user_id)
        new_credit = get_user_credit_balance(user_id)

        payment_description = " –∏ ".join(description_parts)

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
        xp_for_purchase = (product['price'] // 100) * XP_REWARDS["purchase"]
        level_up, new_level, reward = add_xp(user_id, xp_for_purchase, "purchase")

        success_message = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        success_message += f"üéÅ –¢–æ–≤–∞—Ä: {product['name']}\n"
        success_message += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product['price']} –±–∞–ª–ª–æ–≤\n"
        success_message += f"üí∏ –°–ø–∏—Å–∞–Ω–∏–µ: {payment_description}\n"
        success_message += f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –æ—Å–Ω–æ–≤–Ω—ã—Ö + {new_credit} –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö\n"
        success_message += f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{xp_for_purchase}\n"

        if level_up:
            success_message += f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è! +{reward} –±–∞–ª–ª–æ–≤\n"

        success_message += f"üì¶ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"

        bot.send_message(user_id, success_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        send_purchase_notification(
            user_id, product, message.from_user,
            amount_from_balance, amount_from_credit,
            new_balance, new_credit
        )
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    show_purchases(message)


# ================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ==================
@bot.message_handler(commands=['admin'])
@admin_required
def admin_panel(message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    admin_text = """‚öôÔ∏è –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /loans - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
‚Ä¢ /broadcast - –ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ /createlottery - –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é
‚Ä¢ /refresh_cache - –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à Google
‚Ä¢ /create_quiz_code - –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
‚Ä¢ /quiz_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω"""

    bot.send_message(user_id, admin_text)


@bot.message_handler(commands=['stats'])
@admin_required
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM transactions')
        total_transactions = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM loans WHERE status = "active"')
        active_loans = cursor.fetchone()[0]

        cursor.execute('SELECT SUM(amount) FROM loans WHERE status = "active"')
        total_loans_amount = cursor.fetchone()[0] or 0

        cursor.execute('SELECT COUNT(*) FROM daily_bonuses')
        total_bonus_users = cursor.fetchone()[0]

        cursor.execute('SELECT SUM(total_bonus_received) FROM daily_bonuses')
        total_bonus_given = cursor.fetchone()[0] or 0

        cursor.execute('SELECT COUNT(*) FROM user_levels')
        total_level_users = cursor.fetchone()[0]

        cursor.execute('SELECT AVG(level) FROM user_levels')
        avg_level = cursor.fetchone()[0] or 0

        cursor.execute('SELECT COUNT(*) FROM lotteries WHERE status = "active"')
        active_lotteries = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM lottery_tickets')
        total_tickets_sold = cursor.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω
        cursor.execute('SELECT COUNT(*) FROM quiz_codes')
        total_quiz_codes = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM quiz_code_usage')
        total_quiz_completions = cursor.fetchone()[0]

        cursor.execute('SELECT SUM(xp_earned) FROM quiz_code_usage')
        total_quiz_xp = cursor.fetchone()[0] or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
        cursor.execute('SELECT COUNT(*) FROM broadcasts WHERE status = "sent"')
        total_broadcasts = cursor.fetchone()[0]

        cursor.execute('SELECT SUM(sent_count) FROM broadcasts WHERE status = "sent"')
        total_messages_sent = cursor.fetchone()[0] or 0

        conn.close()

        stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
üè¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: {active_loans}
üí∞ –°—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_loans_amount} –±–∞–ª–ª–æ–≤
üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–Ω—É—Å–∞–º–∏: {total_bonus_users}
üéä –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {total_bonus_given} –±–∞–ª–ª–æ–≤
üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Ä–æ–≤–Ω—è–º–∏: {total_level_users}
‚≠ê –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {avg_level:.1f}
üé™ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π: {active_lotteries}
üé´ –ü—Ä–æ–¥–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {total_tickets_sold}
üéØ –ö–æ–¥–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω: {total_quiz_codes}
üìù –ü—Ä–æ–π–¥–µ–Ω–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω: {total_quiz_completions}
üí´ –û–ø—ã—Ç–∞ –∑–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {total_quiz_xp}
üì¢ –†–∞—Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_broadcasts}
üì® –°–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏: {total_messages_sent}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        bot.send_message(message.chat.id, stats_text)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@bot.message_handler(commands=['broadcast'])
@admin_required
def quick_broadcast(message):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = message.from_user.id
    parts = message.text.split(' ', 1)

    if len(parts) < 2:
        bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏]")
        return

    broadcast_text = parts[1]

    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    broadcast_id = create_broadcast(user_id, broadcast_text)

    if broadcast_id:
        success, result = send_broadcast(broadcast_id)

        if success:
            bot.send_message(user_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n{result}")
        else:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n{result}")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")


@bot.message_handler(commands=['createlottery'])
@admin_required
def quick_create_lottery(message):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    parts = message.text.split(' ', 1)

    if len(parts) < 2:
        bot.send_message(user_id,
                         "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createlottery –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤|–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–¥–Ω–µ–π\n\n"
                         "–ü—Ä–∏–º–µ—Ä: /createlottery –¢–µ—Å—Ç–æ–≤–∞—è|–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏|10|100|14")
        return

    lottery_data = parts[1]

    try:
        data_parts = lottery_data.split('|')
        if len(data_parts) == 4:
            name = data_parts[0].strip()
            description = data_parts[1].strip()
            ticket_price = int(data_parts[2].strip())
            max_tickets = int(data_parts[3].strip())
            duration_days = 7
        elif len(data_parts) == 5:
            name = data_parts[0].strip()
            description = data_parts[1].strip()
            ticket_price = int(data_parts[2].strip())
            max_tickets = int(data_parts[3].strip())
            duration_days = int(data_parts[4].strip())
        else:
            bot.send_message(user_id,
                             "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                             "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤\n"
                             "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|–ú–∞–∫—Å_–±–∏–ª–µ—Ç–æ–≤|–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–¥–Ω–µ–π")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration_days <= 0:
            duration_days = 7
        elif duration_days > 365:
            duration_days = 365

        lottery_id = create_lottery(name, description, ticket_price, max_tickets, duration_days)

        if lottery_id:
            bot.send_message(user_id,
                             f"‚úÖ –õ–æ—Ç–µ—Ä–µ—è '{name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                             f"üÜî ID: {lottery_id}\n"
                             f"‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π\n"
                             f"üé´ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {ticket_price} –±–∞–ª–ª–æ–≤\n"
                             f"üìä –ú–∞–∫—Å. –±–∏–ª–µ—Ç–æ–≤: {max_tickets}")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏")

    except ValueError:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–∞—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–µ–Ω–∞, –º–∞–∫—Å. –±–∏–ª–µ—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —á–∏—Å–ª–∞")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['create_quiz_code'])
@admin_required
def create_quiz_code_command(message):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=3)

    if len(parts) < 4:
        bot.send_message(user_id,
                         "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_quiz_code [–∫–æ–¥] [–Ω–∞–∑–≤–∞–Ω–∏–µ] [XP] [–º–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]\n\n"
                         "–ü—Ä–∏–º–µ—Ä: /create_quiz_code CHEM001 –•–∏–º–∏—è_–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ 20 50\n\n"
                         "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üî§ –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    try:
        code = parts[1].upper()
        quiz_name = parts[2]
        xp_reward = int(parts[3])
        max_uses = int(parts[4]) if len(parts) > 4 else 50

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not code.isalnum():
            bot.send_message(user_id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
            return

        if xp_reward < 10 or xp_reward > 50:
            bot.send_message(user_id, "‚ùå XP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 50")
            return

        success = create_quiz_code(code, quiz_name, xp_reward, max_uses, str(user_id))

        if success:
            bot.send_message(user_id,
                             f"‚úÖ –ö–æ–¥ —Å–æ–∑–¥–∞–Ω!\n"
                             f"üî§ {code}\n"
                             f"üìù {quiz_name}\n"
                             f"‚≠ê {xp_reward} XP\n"
                             f"üé´ {max_uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except ValueError:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: XP –∏ –º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['quiz_codes'])
@admin_required
def list_quiz_codes_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã"""
    show_quiz_stats(message)


@bot.message_handler(commands=['quiz_stats'])
@admin_required
def quiz_stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–∞–º
        cursor.execute('''
            SELECT COUNT(*) as total_codes,
                   SUM(used_count) as total_uses,
                   AVG(used_count) as avg_uses
            FROM quiz_codes
        ''')
        code_stats = cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) as unique_users,
                   SUM(xp_earned) as total_xp_given
            FROM quiz_code_usage
        ''')
        user_stats = cursor.fetchone()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
        active_codes = get_active_quiz_codes()

        conn.close()

        stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ö–¢–û–†–ò–ù\n\n"
        stats_text += f"üî§ –í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {code_stats[0]}\n"
        stats_text += f"üé´ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {code_stats[1]}\n"
        stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_stats[0]}\n"
        stats_text += f"üí´ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –æ–ø—ã—Ç–∞: {user_stats[1]}\n\n"

        if active_codes:
            stats_text += "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n"
            for code, quiz_name, xp_reward, max_uses, used_count, expires_at in active_codes[:5]:
                stats_text += f"‚Ä¢ {code}: {quiz_name} ({used_count}/{max_uses})\n"

        bot.send_message(message.chat.id, stats_text)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@bot.message_handler(commands=['refresh_cache'])
@admin_required
def refresh_cache_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ Google —Ç–∞–±–ª–∏—Ü—ã"""
    handle_admin_refresh_cache(message)


# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù")
    print("=" * 50)
    print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:")
    print("   ‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π Google)")
    print("   ‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –æ–ø—ã—Ç–∞")
    print("   ‚Ä¢ üé™ –õ–æ—Ç–µ—Ä–µ–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
    print("   ‚Ä¢ üì¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–∞—Å—Å—ã–ª–æ–∫")
    print("   ‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã")
    print("   ‚Ä¢ üí∏ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ‚Ä¢ üõí –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤")
    print("   ‚Ä¢ üéØ –°–∏—Å—Ç–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
    print("=" * 50)

    test_data = load_google_sheets_data()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets: {len(test_data)}")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω
    create_initial_quiz_codes()

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM lotteries WHERE status = "active"')
        active_lotteries = cursor.fetchone()[0]
        conn.close()

        if active_lotteries == 0:
            create_lottery(
                "üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è",
                "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã! –ü–µ—Ä–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!",
                10,
                100
            )
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é: {e}")

    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        time.sleep(5)
        bot.infinity_polling(timeout=60, long_polling_timeout=60)

# ================== –ó–ê–ü–£–°–ö –î–õ–Ø AMVERA ==================
if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –ù–ê AMVERA (Python 3.14)")
    print("=" * 50)

    while True:
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")

            time.sleep(10)
